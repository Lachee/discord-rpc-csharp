{
  "api/DiscordRPC.ActivityType.html": {
    "href": "api/DiscordRPC.ActivityType.html",
    "title": "Enum ActivityType | Discord RPC C#",
    "summary": "Enum ActivityType Namespace DiscordRPC Assembly DiscordRPC.dll Rich Presence activity type public enum ActivityType Fields Competing = 5 Competing status type. Displays as \"Competing in ...\" Listening = 2 Listening status type. Displays as \"Listening to ...\" Playing = 0 Playing status type. Displays as \"Playing ...\" Watching = 3 Watching status type. Displays as \"Watching ...\""
  },
  "api/DiscordRPC.Assets.html": {
    "href": "api/DiscordRPC.Assets.html",
    "title": "Class Assets | Discord RPC C#",
    "summary": "Class Assets Namespace DiscordRPC Assembly DiscordRPC.dll Information about the pictures used in the Rich Presence. [Serializable] public class Assets Inheritance object Assets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsLargeImageKeyExternal Gets if the large square image is from an external link [JsonIgnore] public bool IsLargeImageKeyExternal { get; } Property Value bool IsSmallImageKeyExternal Gets if the small profile artwork is from an external link [JsonIgnore] public bool IsSmallImageKeyExternal { get; } Property Value bool LargeImageID The ID of the large image. This is only set after Update Presence and will automatically become null when LargeImageKey is changed. [JsonIgnore] public ulong? LargeImageID { get; } Property Value ulong? LargeImageKey Name of the uploaded image for the large profile artwork. Max 256 characters. [JsonProperty(\"large_image\", NullValueHandling = NullValueHandling.Ignore)] public string LargeImageKey { get; set; } Property Value string Remarks Allows URL to directly link to images. LargeImageText The tooltip for the large square image. For example, \"Summoners Rift\" or \"Horizon Lunar Colony\". Max 128 characters. [JsonProperty(\"large_text\", NullValueHandling = NullValueHandling.Ignore)] public string LargeImageText { get; set; } Property Value string LargeImageUrl URL that is linked to when clicking on the large image in the activity card. Max 256 characters. [JsonProperty(\"large_url\", NullValueHandling = NullValueHandling.Ignore)] public string LargeImageUrl { get; set; } Property Value string SmallImageID The ID of the small image. This is only set after Update Presence and will automatically become null when SmallImageKey is changed. [JsonIgnore] public ulong? SmallImageID { get; } Property Value ulong? SmallImageKey Name of the uploaded image for the small profile artwork. Max 256 characters. [JsonProperty(\"small_image\", NullValueHandling = NullValueHandling.Ignore)] public string SmallImageKey { get; set; } Property Value string Remarks Allows URL to directly link to images. SmallImageText The tooltip for the small circle image. For example, \"LvL 6\" or \"Ultimate 85%\". Max 128 characters. [JsonProperty(\"small_text\", NullValueHandling = NullValueHandling.Ignore)] public string SmallImageText { get; set; } Property Value string SmallImageUrl URL that is linked to when clicking on the small image in the activity card. Max 256 characters. [JsonProperty(\"small_url\", NullValueHandling = NullValueHandling.Ignore)] public string SmallImageUrl { get; set; } Property Value string"
  },
  "api/DiscordRPC.BaseRichPresence.html": {
    "href": "api/DiscordRPC.BaseRichPresence.html",
    "title": "Class BaseRichPresence | Discord RPC C#",
    "summary": "Class BaseRichPresence Namespace DiscordRPC Assembly DiscordRPC.dll The base rich presence structure [JsonObject(MemberSerialization = MemberSerialization.OptIn)] [Serializable] public class BaseRichPresence Inheritance object BaseRichPresence Derived RichPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _details Inernal inner detail string protected string _details Field Value string _detailsUrl Inernal inner detail URL string protected string _detailsUrl Field Value string _state Inernal inner state string protected string _state Field Value string _stateUrl Inernal inner state URL string protected string _stateUrl Field Value string Properties Assets The names of the images to use and the tooltips to give those images. [JsonProperty(\"assets\", NullValueHandling = NullValueHandling.Ignore)] public Assets Assets { get; set; } Property Value Assets Details What the user is currently doing. For example, \"Competitive - Total Mayhem\". Max 128 characters [JsonProperty(\"details\", NullValueHandling = NullValueHandling.Ignore)] public string Details { get; set; } Property Value string DetailsUrl URL that is linked to when clicking on the details text in the activity card. Max 256 characters [JsonProperty(\"details_url\", NullValueHandling = NullValueHandling.Ignore)] public string DetailsUrl { get; set; } Property Value string Party The party the player is currently in. The ID must be set for this to be included in the RichPresence update. [JsonProperty(\"party\", NullValueHandling = NullValueHandling.Ignore)] public Party Party { get; set; } Property Value Party Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. Make this object null if you do not wish too / unable too implement the Join / Request feature. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. Visit the Rich Presence How-To for more information. [JsonProperty(\"secrets\", NullValueHandling = NullValueHandling.Ignore)] public Secrets Secrets { get; set; } Property Value Secrets State The user's current Party status. For example, \"Playing Solo\" or \"With Friends\". Max 128 characters [JsonProperty(\"state\", NullValueHandling = NullValueHandling.Ignore)] public string State { get; set; } Property Value string StateUrl URL that is linked to when clicking on the details text in the activity card. Max 256 characters [JsonProperty(\"state_url\", NullValueHandling = NullValueHandling.Ignore)] public string StateUrl { get; set; } Property Value string StatusDisplay The display type for the status [JsonProperty(\"status_display_type\", NullValueHandling = NullValueHandling.Ignore)] public StatusDisplayType StatusDisplay { get; set; } Property Value StatusDisplayType Timestamps The time elapsed / remaining time data. [JsonProperty(\"timestamps\", NullValueHandling = NullValueHandling.Ignore)] public Timestamps Timestamps { get; set; } Property Value Timestamps Type The activity type [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public ActivityType Type { get; set; } Property Value ActivityType Methods HasAssets() Does the Rich Presence have valid assets? public bool HasAssets() Returns bool HasParty() Does the Rich Presence have a valid party? public bool HasParty() Returns bool HasSecrets() Does the Rich Presence have valid secrets? public bool HasSecrets() Returns bool HasTimestamps() Does the Rich Presence have valid timestamps? public bool HasTimestamps() Returns bool ToRichPresence() Converts this BaseRichPresence to RichPresence public RichPresence ToRichPresence() Returns RichPresence Operators implicit operator bool(BaseRichPresence) Operator that converts a presence into a boolean for null checks. public static implicit operator bool(BaseRichPresence presence) Parameters presence BaseRichPresence Returns bool"
  },
  "api/DiscordRPC.Button.html": {
    "href": "api/DiscordRPC.Button.html",
    "title": "Class Button | Discord RPC C#",
    "summary": "Class Button Namespace DiscordRPC Assembly DiscordRPC.dll A Rich Presence button. public class Button Inheritance object Button Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Label Text shown on the button Max 31 bytes. [JsonProperty(\"label\")] public string Label { get; set; } Property Value string Url The URL opened when clicking the button. Max 512 characters. [JsonProperty(\"url\")] public string Url { get; set; } Property Value string"
  },
  "api/DiscordRPC.Configuration.html": {
    "href": "api/DiscordRPC.Configuration.html",
    "title": "Class Configuration | Discord RPC C#",
    "summary": "Class Configuration Namespace DiscordRPC Assembly DiscordRPC.dll Configuration of the current RPC connection public class Configuration Inheritance object Configuration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApiEndpoint The Discord API endpoint that should be used. [JsonProperty(\"api_endpoint\")] public string ApiEndpoint { get; set; } Property Value string CdnHost The CDN endpoint [JsonProperty(\"cdn_host\")] public string CdnHost { get; set; } Property Value string Environment The type of environment the connection on. Usually Production. [JsonProperty(\"environment\")] public string Environment { get; set; } Property Value string"
  },
  "api/DiscordRPC.DiscordRpcClient.html": {
    "href": "api/DiscordRPC.DiscordRpcClient.html",
    "title": "Class DiscordRpcClient | Discord RPC C#",
    "summary": "Class DiscordRpcClient Namespace DiscordRPC Assembly DiscordRPC.dll A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. public sealed class DiscordRpcClient : IDisposable Inheritance object DiscordRpcClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DiscordRpcClient(string) Creates a new Discord RPC Client which can be used to send Rich Presence and receive Join / Spectate events. public DiscordRpcClient(string applicationID) Parameters applicationID string The ID of the application created at discord's developers portal. DiscordRpcClient(string, int, ILogger, bool, INamedPipeClient) Creates a new Discord RPC Client which can be used to send Rich Presence and receive Join / Spectate events. This constructor exposes more advance features such as custom NamedPipeClients and Loggers. public DiscordRpcClient(string applicationID, int pipe = -1, ILogger logger = null, bool autoEvents = true, INamedPipeClient client = null) Parameters applicationID string The ID of the application created at discord's developers portal. pipe int The pipe to connect too. If -1, then the client will scan for the first available instance of Discord. logger ILogger The logger used to report messages. If null, then a NullLogger will be created and logs will be ignored. autoEvents bool Should events be automatically invoked from the RPC Thread as they arrive from discord? client INamedPipeClient The pipe client to use and communicate to discord through. If null, the default ManagedNamedPipeClient will be used. Properties ApplicationID Gets the Application ID of the RPC Client. public string ApplicationID { get; } Property Value string AutoEvents Indicates if the client will automatically invoke the events without Invoke() having to be called. public bool AutoEvents { get; } Property Value bool Configuration The current configuration the connection is using. Only becomes available after a ready event. public Configuration Configuration { get; } Property Value Configuration CurrentPresence The current presence that the client has. Gets set with SetPresence(RichPresence) and updated on OnPresenceUpdate. public RichPresence CurrentPresence { get; } Property Value RichPresence CurrentUser The current discord user. This is updated with the ready event and will be null until the event is fired from the connection. public User CurrentUser { get; } Property Value User HasRegisteredUriScheme Gets a value indicating if the client has registered a URI Scheme. If this is false, Join / Spectate events will fail. To register a URI Scheme, call RegisterUriScheme(string, string). public bool HasRegisteredUriScheme { get; } Property Value bool IsDisposed The dispose state of the client object. public bool IsDisposed { get; } Property Value bool IsInitialized Represents if the client has been Initialize() public bool IsInitialized { get; } Property Value bool Logger The logger used this client and its associated components. ILogger are not called safely and can come from any thread. It is upto the ILogger to account for this and apply appropriate thread safe methods. public ILogger Logger { get; set; } Property Value ILogger MaxQueueSize The maximum size of the message queue received from Discord. public int MaxQueueSize { get; } Property Value int ProcessID Gets the ID of the process used to run the RPC Client. Discord tracks this process ID and waits for its termination. Defaults to the current application process ID. public int ProcessID { get; } Property Value int ShutdownOnly Forces the connection to shutdown gracefully instead of just aborting the connection. This option helps prevents ghosting in applications where the Process ID is a host and the game is executed within the host (ie: the Unity3D editor). This will tell Discord that we have no presence and we are closing the connection manually, instead of waiting for the process to terminate. public bool ShutdownOnly { get; set; } Property Value bool SkipIdenticalPresence Skips sending presences that are identical to the current one. public bool SkipIdenticalPresence { get; set; } Property Value bool SteamID Gets the Steam ID of the RPC Client. This value can be null if none was supplied. public string SteamID { get; } Property Value string Subscription Current subscription to events. Gets set with Subscribe(EventType), UnsubscribeMessage and updated on OnSubscribe, OnUnsubscribe. public EventType Subscription { get; } Property Value EventType TargetPipe The pipe the discord client is on, ranging from 0 to 9. Use -1 to scan through all pipes. This property can be used for testing multiple clients. For example, if a Discord Client was on pipe 0, the Discord Canary is most likely on pipe 1. public int TargetPipe { get; } Property Value int Methods ClearPresence() Clears the Rich Presence. Use this just before disposal to prevent ghosting. public void ClearPresence() Deinitialize() Attempts to disconnect and deinitialize the IPC connection while retaining the settings. public void Deinitialize() Dispose() Terminates the connection to Discord and disposes of the object. public void Dispose() Initialize() Attempts to initalize a connection to the Discord IPC. public bool Initialize() Returns bool Invoke() Dequeues all the messages from Discord, processes them and then invoke appropriate event handlers. This will process the message and update the internal state before invoking the events. Returns the messages that were invoked in the order they were invoked. This method cannot be used if AutoEvents is enabled. public IMessage[] Invoke() Returns IMessage[] Returns the messages that were invoked and in the order they were invoked. RegisterUriScheme(string, string) Registers the application executable to a custom URI Scheme. This is required for the Join and Spectate features. Discord will run this custom URI Scheme to launch your application when a user presses either of the buttons. public bool RegisterUriScheme(string steamAppID = null, string executable = null) Parameters steamAppID string Optional Steam ID. If supplied, Discord will launch the game through steam instead of directly calling it. executable string The path to the executable. If null, the path to the current executable will be used instead. Returns bool Respond(JoinRequestMessage, bool) Respond to a Join Request. All requests will timeout after 30 seconds. Because of the 30 second timeout, it is recommended to call Invoke() faster than every 15 seconds to give your users adequate time to respond to the request. public void Respond(JoinRequestMessage request, bool acceptRequest) Parameters request JoinRequestMessage The request that is being responded too. acceptRequest bool Accept the join request. SetButton(Button, int) Updates only the Buttons of the CurrentPresence and updates the button with the given index. Returns the newly edited Rich Presence. public RichPresence SetButton(Button button, int index = 0) Parameters button Button The buttons of the Rich Presence index int The number of the button Returns RichPresence Updated Rich Presence SetPresence(RichPresence) Sets the Rich Presence. public void SetPresence(RichPresence presence) Parameters presence RichPresence The Rich Presence to set on the current Discord user. SetSubscription(EventType) Sets the subscription to the events sent from Discord. Requires the UriScheme to be registered. public void SetSubscription(EventType type) Parameters type EventType The new subscription as a flag. Events selected in the flag will be subscribed too and the other events will be unsubscribed. Subscribe(EventType) Subscribes to an event sent from discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. public void Subscribe(EventType type) Parameters type EventType The event type to subscribe to SynchronizeState() Resends the current presence and subscription. This is used when Ready is called to keep the current state within discord. public void SynchronizeState() Unsubscribe(EventType) Unsubscribe from the event sent by discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. public void Unsubscribe(EventType type) Parameters type EventType The event type to unsubscribe from Unubscribe(EventType) [Obsolete(\"Replaced with Unsubscribe\", true)] public void Unubscribe(EventType type) Parameters type EventType Update(Action<RichPresence>) Updates the values assigned in the delegate passed public RichPresence Update(Action<RichPresence> func) Parameters func Action<RichPresence> Delegate used to update the rich presence Returns RichPresence Updated Rich Presence UpdateButtons(Button[]) Updates only the Buttons of the CurrentPresence and updates/removes the buttons. Returns the newly edited Rich Presence. public RichPresence UpdateButtons(Button[] buttons = null) Parameters buttons Button[] The buttons of the Rich Presence Returns RichPresence Updated Rich Presence UpdateClearTime() Sets the start and end time of CurrentPresence to null and sends it to Discord. public RichPresence UpdateClearTime() Returns RichPresence Updated Rich Presence UpdateDetails(string) Updates only the Details of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. public RichPresence UpdateDetails(string details) Parameters details string The details of the Rich Presence Returns RichPresence Updated Rich Presence UpdateEndTime() Sets the end time of the CurrentPresence to now and sends the updated presence to Discord. public RichPresence UpdateEndTime() Returns RichPresence Updated Rich Presence UpdateEndTime(DateTime) Sets the end time of the CurrentPresence and sends the updated presence to Discord. public RichPresence UpdateEndTime(DateTime time) Parameters time DateTime The new time for the end Returns RichPresence Updated Rich Presence UpdateLargeAsset(string, string) Updates the large Assets of the CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. public RichPresence UpdateLargeAsset(string key = null, string tooltip = null) Parameters key string Optional: The new key to set the asset too tooltip string Optional: The new tooltip to display on the asset Returns RichPresence Updated Rich Presence UpdateParty(Party) Updates only the Party of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. public RichPresence UpdateParty(Party party) Parameters party Party The party of the Rich Presence Returns RichPresence Updated Rich Presence UpdatePartySize(int) Updates the Size of the CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new NullReferenceException if the Party does not exist. public RichPresence UpdatePartySize(int size) Parameters size int The new size of the party. It cannot be greater than Max Returns RichPresence Updated Rich Presence UpdatePartySize(int, int) Updates the Size of the CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new NullReferenceException if the Party does not exist. public RichPresence UpdatePartySize(int size, int max) Parameters size int The new size of the party. It cannot be greater than Max max int The new size of the party. It cannot be smaller than Size Returns RichPresence Updated Rich Presence UpdateSecrets(Secrets) Updates the Secrets of the CurrentPresence and sends the updated presence to Discord. Will override previous secret entirely. public RichPresence UpdateSecrets(Secrets secrets) Parameters secrets Secrets The new secret to send to discord. Returns RichPresence Updated Rich Presence UpdateSmallAsset(string, string) Updates the small Assets of the CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. public RichPresence UpdateSmallAsset(string key = null, string tooltip = null) Parameters key string Optional: The new key to set the asset too tooltip string Optional: The new tooltip to display on the asset Returns RichPresence Updated Rich Presence UpdateStartTime() Sets the start time of the CurrentPresence to now and sends the updated presence to Discord. public RichPresence UpdateStartTime() Returns RichPresence Updated Rich Presence UpdateStartTime(DateTime) Sets the start time of the CurrentPresence and sends the updated presence to Discord. public RichPresence UpdateStartTime(DateTime time) Parameters time DateTime The new time for the start Returns RichPresence Updated Rich Presence UpdateState(string) Updates only the State of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. public RichPresence UpdateState(string state) Parameters state string The state of the Rich Presence Returns RichPresence Updated Rich Presence UpdateStatusDisplayType(StatusDisplayType) Updates only the StatusDisplay of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. public RichPresence UpdateStatusDisplayType(StatusDisplayType type) Parameters type StatusDisplayType The type to display on the status Returns RichPresence Updated Rich Presence UpdateType(ActivityType) Updates only the Type of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. public RichPresence UpdateType(ActivityType type) Parameters type ActivityType The type of the Rich Presence Returns RichPresence Updated Rich Presence Events OnClose Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnCloseEvent OnClose Event Type OnCloseEvent OnConnectionEstablished The connection to the discord client was succesfull. This is called before Ready. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnConnectionEstablishedEvent OnConnectionEstablished Event Type OnConnectionEstablishedEvent OnConnectionFailed Failed to establish any connection with discord. Discord is potentially not running? If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnConnectionFailedEvent OnConnectionFailed Event Type OnConnectionFailedEvent OnError Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnErrorEvent OnError Event Type OnErrorEvent OnJoin Called when the Discord Client wishes for this process to join a game. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnJoinEvent OnJoin Event Type OnJoinEvent OnJoinRequested Called when another discord user requests permission to join this game. This event is not invoked untill Invoke() is executed. public event OnJoinRequestedEvent OnJoinRequested Event Type OnJoinRequestedEvent OnPresenceUpdate Called when the Discord Client has updated the presence. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnPresenceUpdateEvent OnPresenceUpdate Event Type OnPresenceUpdateEvent OnReady Called when the discord client is ready to send and receive messages. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnReadyEvent OnReady Event Type OnReadyEvent OnRpcMessage The RPC Connection has sent a message. Called before any other event and executed from the RPC Thread. public event OnRpcMessageEvent OnRpcMessage Event Type OnRpcMessageEvent OnSpectate Called when the Discord Client wishes for this process to spectate a game. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnSpectateEvent OnSpectate Event Type OnSpectateEvent OnSubscribe Called when the Discord Client has subscribed to an event. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnSubscribeEvent OnSubscribe Event Type OnSubscribeEvent OnUnsubscribe Called when the Discord Client has unsubscribed from an event. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. public event OnUnsubscribeEvent OnUnsubscribe Event Type OnUnsubscribeEvent"
  },
  "api/DiscordRPC.EventType.html": {
    "href": "api/DiscordRPC.EventType.html",
    "title": "Enum EventType | Discord RPC C#",
    "summary": "Enum EventType Namespace DiscordRPC Assembly DiscordRPC.dll The type of event receieved by the RPC. A flag type that can be combined. [Flags] public enum EventType Fields Join = 2 Called when the Discord Client wishes to enter a game to play. JoinRequest = 4 Called when another Discord Client has requested permission to join this game. None = 0 No event Spectate = 1 Called when the Discord Client wishes to enter a game to spectate"
  },
  "api/DiscordRPC.Events.OnCloseEvent.html": {
    "href": "api/DiscordRPC.Events.OnCloseEvent.html",
    "title": "Delegate OnCloseEvent | Discord RPC C#",
    "summary": "Delegate OnCloseEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. public delegate void OnCloseEvent(object sender, CloseMessage args) Parameters sender object The Discord client handler that sent this event args CloseMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnConnectionEstablishedEvent.html": {
    "href": "api/DiscordRPC.Events.OnConnectionEstablishedEvent.html",
    "title": "Delegate OnConnectionEstablishedEvent | Discord RPC C#",
    "summary": "Delegate OnConnectionEstablishedEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll The connection to the discord client was succesfull. This is called before OnReadyEvent. public delegate void OnConnectionEstablishedEvent(object sender, ConnectionEstablishedMessage args) Parameters sender object The Discord client handler that sent this event args ConnectionEstablishedMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnConnectionFailedEvent.html": {
    "href": "api/DiscordRPC.Events.OnConnectionFailedEvent.html",
    "title": "Delegate OnConnectionFailedEvent | Discord RPC C#",
    "summary": "Delegate OnConnectionFailedEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Failed to establish any connection with discord. Discord is potentially not running? public delegate void OnConnectionFailedEvent(object sender, ConnectionFailedMessage args) Parameters sender object The Discord client handler that sent this event args ConnectionFailedMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnErrorEvent.html": {
    "href": "api/DiscordRPC.Events.OnErrorEvent.html",
    "title": "Delegate OnErrorEvent | Discord RPC C#",
    "summary": "Delegate OnErrorEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. public delegate void OnErrorEvent(object sender, ErrorMessage args) Parameters sender object The Discord client handler that sent this event args ErrorMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnJoinEvent.html": {
    "href": "api/DiscordRPC.Events.OnJoinEvent.html",
    "title": "Delegate OnJoinEvent | Discord RPC C#",
    "summary": "Delegate OnJoinEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client wishes for this process to join a game. public delegate void OnJoinEvent(object sender, JoinMessage args) Parameters sender object The Discord client handler that sent this event args JoinMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnJoinRequestedEvent.html": {
    "href": "api/DiscordRPC.Events.OnJoinRequestedEvent.html",
    "title": "Delegate OnJoinRequestedEvent | Discord RPC C#",
    "summary": "Delegate OnJoinRequestedEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when another discord user requests permission to join this game. public delegate void OnJoinRequestedEvent(object sender, JoinRequestMessage args) Parameters sender object The Discord client handler that sent this event args JoinRequestMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnPresenceUpdateEvent.html": {
    "href": "api/DiscordRPC.Events.OnPresenceUpdateEvent.html",
    "title": "Delegate OnPresenceUpdateEvent | Discord RPC C#",
    "summary": "Delegate OnPresenceUpdateEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client has updated the presence. public delegate void OnPresenceUpdateEvent(object sender, PresenceMessage args) Parameters sender object The Discord client handler that sent this event args PresenceMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnReadyEvent.html": {
    "href": "api/DiscordRPC.Events.OnReadyEvent.html",
    "title": "Delegate OnReadyEvent | Discord RPC C#",
    "summary": "Delegate OnReadyEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client is ready to send and receive messages. public delegate void OnReadyEvent(object sender, ReadyMessage args) Parameters sender object The Discord client handler that sent this event args ReadyMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnRpcMessageEvent.html": {
    "href": "api/DiscordRPC.Events.OnRpcMessageEvent.html",
    "title": "Delegate OnRpcMessageEvent | Discord RPC C#",
    "summary": "Delegate OnRpcMessageEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll A RPC Message is received. public delegate void OnRpcMessageEvent(object sender, IMessage msg) Parameters sender object The handler that sent this event msg IMessage The raw message from the RPC"
  },
  "api/DiscordRPC.Events.OnSpectateEvent.html": {
    "href": "api/DiscordRPC.Events.OnSpectateEvent.html",
    "title": "Delegate OnSpectateEvent | Discord RPC C#",
    "summary": "Delegate OnSpectateEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client wishes for this process to spectate a game. public delegate void OnSpectateEvent(object sender, SpectateMessage args) Parameters sender object The Discord client handler that sent this event args SpectateMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnSubscribeEvent.html": {
    "href": "api/DiscordRPC.Events.OnSubscribeEvent.html",
    "title": "Delegate OnSubscribeEvent | Discord RPC C#",
    "summary": "Delegate OnSubscribeEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client has subscribed to an event. public delegate void OnSubscribeEvent(object sender, SubscribeMessage args) Parameters sender object The Discord client handler that sent this event args SubscribeMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnUnsubscribeEvent.html": {
    "href": "api/DiscordRPC.Events.OnUnsubscribeEvent.html",
    "title": "Delegate OnUnsubscribeEvent | Discord RPC C#",
    "summary": "Delegate OnUnsubscribeEvent Namespace DiscordRPC.Events Assembly DiscordRPC.dll Called when the Discord Client has unsubscribed from an event. public delegate void OnUnsubscribeEvent(object sender, UnsubscribeMessage args) Parameters sender object The Discord client handler that sent this event args UnsubscribeMessage The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.html": {
    "href": "api/DiscordRPC.Events.html",
    "title": "Namespace DiscordRPC.Events | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Events Delegates OnCloseEvent Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. OnConnectionEstablishedEvent The connection to the discord client was succesfull. This is called before OnReadyEvent. OnConnectionFailedEvent Failed to establish any connection with discord. Discord is potentially not running? OnErrorEvent Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. OnJoinEvent Called when the Discord Client wishes for this process to join a game. OnJoinRequestedEvent Called when another discord user requests permission to join this game. OnPresenceUpdateEvent Called when the Discord Client has updated the presence. OnReadyEvent Called when the Discord Client is ready to send and receive messages. OnRpcMessageEvent A RPC Message is received. OnSpectateEvent Called when the Discord Client wishes for this process to spectate a game. OnSubscribeEvent Called when the Discord Client has subscribed to an event. OnUnsubscribeEvent Called when the Discord Client has unsubscribed from an event."
  },
  "api/DiscordRPC.Exceptions.BadPresenceException.html": {
    "href": "api/DiscordRPC.Exceptions.BadPresenceException.html",
    "title": "Class BadPresenceException | Discord RPC C#",
    "summary": "Class BadPresenceException Namespace DiscordRPC.Exceptions Assembly DiscordRPC.dll A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. public class BadPresenceException : Exception, ISerializable Inheritance object Exception BadPresenceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/DiscordRPC.Exceptions.InvalidConfigurationException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | Discord RPC C#",
    "summary": "Class InvalidConfigurationException Namespace DiscordRPC.Exceptions Assembly DiscordRPC.dll A InvalidConfigurationException is thrown when trying to perform a action that conflicts with the current configuration. public class InvalidConfigurationException : Exception, ISerializable Inheritance object Exception InvalidConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/DiscordRPC.Exceptions.InvalidPipeException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidPipeException.html",
    "title": "Class InvalidPipeException | Discord RPC C#",
    "summary": "Class InvalidPipeException Namespace DiscordRPC.Exceptions Assembly DiscordRPC.dll The exception that is thrown when a error occurs while communicating with a pipe or when a connection attempt fails. [Obsolete(\"Not actually used anywhere\")] public class InvalidPipeException : Exception, ISerializable Inheritance object Exception InvalidPipeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/DiscordRPC.Exceptions.StringOutOfRangeException.html": {
    "href": "api/DiscordRPC.Exceptions.StringOutOfRangeException.html",
    "title": "Class StringOutOfRangeException | Discord RPC C#",
    "summary": "Class StringOutOfRangeException Namespace DiscordRPC.Exceptions Assembly DiscordRPC.dll A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. public class StringOutOfRangeException : Exception, ISerializable Inheritance object Exception StringOutOfRangeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties MaximumLength Maximum length the string is allowed to be. public int MaximumLength { get; } Property Value int MinimumLength Minimum length the string is allowed to be. public int MinimumLength { get; } Property Value int"
  },
  "api/DiscordRPC.Exceptions.UninitializedException.html": {
    "href": "api/DiscordRPC.Exceptions.UninitializedException.html",
    "title": "Class UninitializedException | Discord RPC C#",
    "summary": "Class UninitializedException Namespace DiscordRPC.Exceptions Assembly DiscordRPC.dll Thrown when an action is performed on a client that has not yet been initialized public class UninitializedException : Exception, ISerializable Inheritance object Exception UninitializedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/DiscordRPC.Exceptions.html": {
    "href": "api/DiscordRPC.Exceptions.html",
    "title": "Namespace DiscordRPC.Exceptions | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Exceptions Classes BadPresenceException A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. InvalidConfigurationException A InvalidConfigurationException is thrown when trying to perform a action that conflicts with the current configuration. InvalidPipeException The exception that is thrown when a error occurs while communicating with a pipe or when a connection attempt fails. StringOutOfRangeException A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. UninitializedException Thrown when an action is performed on a client that has not yet been initialized"
  },
  "api/DiscordRPC.Helper.StringTools.html": {
    "href": "api/DiscordRPC.Helper.StringTools.html",
    "title": "Class StringTools | Discord RPC C#",
    "summary": "Class StringTools Namespace DiscordRPC.Helper Assembly DiscordRPC.dll Collectin of helpful string extensions public static class StringTools Inheritance object StringTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNullOrString(string) Will return null if the string is whitespace, otherwise it will return the string. public static string GetNullOrString(this string str) Parameters str string The string to check Returns string Null if the string is empty, otherwise the string ToCamelCase(string) Converts the string into UpperCamelCase (Pascal Case). public static string ToCamelCase(this string str) Parameters str string The string to convert Returns string ToSnakeCase(string) Converts the string into UPPER_SNAKE_CASE public static string ToSnakeCase(this string str) Parameters str string The string to convert Returns string WithinLength(string, int) Does the string fit within the given amount of bytes? Uses UTF8 encoding. public static bool WithinLength(this string str, int bytes) Parameters str string The string to check bytes int The maximum number of bytes the string can take up Returns bool True if the string fits within the number of bytes WithinLength(string, int, Encoding) Does the string fit within the given amount of bytes? public static bool WithinLength(this string str, int bytes, Encoding encoding) Parameters str string The string to check bytes int The maximum number of bytes the string can take up encoding Encoding The encoding to count the bytes with Returns bool True if the string fits within the number of bytes"
  },
  "api/DiscordRPC.Helper.html": {
    "href": "api/DiscordRPC.Helper.html",
    "title": "Namespace DiscordRPC.Helper | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Helper Classes StringTools Collectin of helpful string extensions"
  },
  "api/DiscordRPC.IO.INamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.INamedPipeClient.html",
    "title": "Interface INamedPipeClient | Discord RPC C#",
    "summary": "Interface INamedPipeClient Namespace DiscordRPC.IO Assembly DiscordRPC.dll Pipe Client used to communicate with Discord. public interface INamedPipeClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectedPipe The pipe the client is currently connected too int ConnectedPipe { get; } Property Value int IsConnected Is the pipe client currently connected? bool IsConnected { get; } Property Value bool Logger The logger for the Pipe client to use ILogger Logger { get; set; } Property Value ILogger Methods Close() Closes the connection void Close() Connect(int) Attempts to connect to the pipe. If 0-9 is passed to pipe, it should try to only connect to the specified pipe. If -1 is passed, the pipe will find the first available pipe. bool Connect(int pipe) Parameters pipe int If -1 is passed, the pipe will find the first available pipe, otherwise it connects to the pipe that was supplied Returns bool ReadFrame(out PipeFrame) Reads a frame if there is one available. Returns false if there is none. This should be non blocking (aka use a Peek first). bool ReadFrame(out PipeFrame frame) Parameters frame PipeFrame The frame that has been read. Will be default(PipeFrame) if it fails to read Returns bool Returns true if a frame has been read, otherwise false. WriteFrame(PipeFrame) Writes the frame to the pipe. Returns false if any errors occur. bool WriteFrame(PipeFrame frame) Parameters frame PipeFrame The frame to be written Returns bool"
  },
  "api/DiscordRPC.IO.ManagedNamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.ManagedNamedPipeClient.html",
    "title": "Class ManagedNamedPipeClient | Discord RPC C#",
    "summary": "Class ManagedNamedPipeClient Namespace DiscordRPC.IO Assembly DiscordRPC.dll A named pipe client using the .NET framework NamedPipeClientStream public sealed class ManagedNamedPipeClient : INamedPipeClient, IDisposable Inheritance object ManagedNamedPipeClient Implements INamedPipeClient IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ManagedNamedPipeClient() Creates a new instance of a Managed NamedPipe client. Doesn't connect to anything yet, just setups the values. public ManagedNamedPipeClient() Properties ConnectedPipe The pipe we are currently connected too. public int ConnectedPipe { get; } Property Value int IsConnected Checks if the client is connected public bool IsConnected { get; } Property Value bool Logger The logger for the Pipe client to use public ILogger Logger { get; set; } Property Value ILogger Methods Close() Closes the pipe public void Close() Connect(int) Connects to the pipe public bool Connect(int pipe) Parameters pipe int Returns bool Dispose() Disposes of the stream public void Dispose() GetPipeName(int) returns a platform specific path that Discord is hosting the IPC on. public static string GetPipeName(int pipe) Parameters pipe int The pipe number Returns string GetPipeName(int, string) Returns a platform specific path that Discord is hosting the IPC on. public static string GetPipeName(int pipe, string sandbox) Parameters pipe int The pipe number. sandbox string The sandbox environment the pipe is in Returns string GetPipeSandbox() Gets the name of the possible sandbox environment the pipe might be located within. If the platform doesn't support sandboxed Discord, then it will return null. public static string GetPipeSandbox() Returns string IsUnix() Returns true if the current OS platform is Unix based (Unix or MacOSX). public static bool IsUnix() Returns bool ReadFrame(out PipeFrame) Reads a frame, returning false if none are available public bool ReadFrame(out PipeFrame frame) Parameters frame PipeFrame Returns bool WriteFrame(PipeFrame) Writes a frame to the pipe public bool WriteFrame(PipeFrame frame) Parameters frame PipeFrame Returns bool"
  },
  "api/DiscordRPC.IO.Opcode.html": {
    "href": "api/DiscordRPC.IO.Opcode.html",
    "title": "Enum Opcode | Discord RPC C#",
    "summary": "Enum Opcode Namespace DiscordRPC.IO Assembly DiscordRPC.dll The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect. public enum Opcode : uint Fields Close = 2 Discord has closed the connection Frame = 1 Generic message frame Handshake = 0 Initial handshake frame Ping = 3 Ping frame (not used?) Pong = 4 Pong frame (not used?)"
  },
  "api/DiscordRPC.IO.PipeFrame.html": {
    "href": "api/DiscordRPC.IO.PipeFrame.html",
    "title": "Struct PipeFrame | Discord RPC C#",
    "summary": "Struct PipeFrame Namespace DiscordRPC.IO Assembly DiscordRPC.dll A frame received and sent to the Discord client for RPC communications. public struct PipeFrame : IEquatable<PipeFrame> Implements IEquatable<PipeFrame> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PipeFrame(Opcode, object) Creates a new pipe frame instance public PipeFrame(Opcode opcode, object data) Parameters opcode Opcode The opcode of the frame data object The data of the frame that will be serialized as JSON Fields MAX_SIZE The maxium size of a pipe frame (16kb). public static readonly int MAX_SIZE Field Value int Properties Data The data in the frame public byte[] Data { readonly get; set; } Property Value byte[] Length The length of the frame data public uint Length { get; } Property Value uint Message The data represented as a string. public string Message { get; set; } Property Value string MessageEncoding Gets the encoding used for the pipe frames public Encoding MessageEncoding { get; } Property Value Encoding Opcode The opcode of the frame public Opcode Opcode { readonly get; set; } Property Value Opcode Methods Equals(PipeFrame) Compares if the frame equals the other frame. public bool Equals(PipeFrame other) Parameters other PipeFrame Returns bool GetObject<T>() Deserializes the data into the supplied type using JSON. public T GetObject<T>() Returns T Type Parameters T The type to deserialize into ReadStream(Stream) Attempts to read the contents of the frame from the stream public bool ReadStream(Stream stream) Parameters stream Stream Returns bool SetObject(Opcode, object) Sets the opcodes and serializes the object into a json string. public void SetObject(Opcode opcode, object obj) Parameters opcode Opcode obj object SetObject(object) Serializes the object into json string then encodes it into Data. public void SetObject(object obj) Parameters obj object WriteStream(Stream) Writes the frame into the target frame as one big byte block. public void WriteStream(Stream stream) Parameters stream Stream"
  },
  "api/DiscordRPC.IO.html": {
    "href": "api/DiscordRPC.IO.html",
    "title": "Namespace DiscordRPC.IO | Discord RPC C#",
    "summary": "Namespace DiscordRPC.IO Classes ManagedNamedPipeClient A named pipe client using the .NET framework NamedPipeClientStream Structs PipeFrame A frame received and sent to the Discord client for RPC communications. Interfaces INamedPipeClient Pipe Client used to communicate with Discord. Enums Opcode The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect."
  },
  "api/DiscordRPC.Logging.ConsoleLogger.html": {
    "href": "api/DiscordRPC.Logging.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Discord RPC C#",
    "summary": "Class ConsoleLogger Namespace DiscordRPC.Logging Assembly DiscordRPC.dll Logs the outputs to the console using WriteLine() public class ConsoleLogger : ILogger Inheritance object ConsoleLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleLogger() Creates a new instance of a Console Logger. public ConsoleLogger() ConsoleLogger(LogLevel) Creates a new instance of a Console Logger public ConsoleLogger(LogLevel level) Parameters level LogLevel The log level ConsoleLogger(LogLevel, bool) Creates a new instance of a Console Logger with a set log level public ConsoleLogger(LogLevel level, bool coloured) Parameters level LogLevel The log level coloured bool Should the logs be in colour? Properties Colored A alias too Coloured [Obsolete(\"Use Coloured\")] public bool Colored { get; set; } Property Value bool Coloured Should the output be coloured? public bool Coloured { get; set; } Property Value bool Level The level of logging to apply to this logger. public LogLevel Level { get; set; } Property Value LogLevel Methods Error(string, params object[]) Error log messsages public void Error(string message, params object[] args) Parameters message string args object[] Info(string, params object[]) Informative log messages public void Info(string message, params object[] args) Parameters message string args object[] Trace(string, params object[]) Informative log messages public void Trace(string message, params object[] args) Parameters message string args object[] Warning(string, params object[]) Warning log messages public void Warning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/DiscordRPC.Logging.FileLogger.html": {
    "href": "api/DiscordRPC.Logging.FileLogger.html",
    "title": "Class FileLogger | Discord RPC C#",
    "summary": "Class FileLogger Namespace DiscordRPC.Logging Assembly DiscordRPC.dll Logs the outputs to a file public class FileLogger : ILogger Inheritance object FileLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileLogger(string) Creates a new instance of the file logger public FileLogger(string path) Parameters path string The path of the log file. FileLogger(string, LogLevel) Creates a new instance of the file logger public FileLogger(string path, LogLevel level) Parameters path string The path of the log file. level LogLevel The level to assign to the logger. Properties File Should the output be coloured? public string File { get; set; } Property Value string Level The level of logging to apply to this logger. public LogLevel Level { get; set; } Property Value LogLevel Methods Error(string, params object[]) Error log messsages public void Error(string message, params object[] args) Parameters message string args object[] Info(string, params object[]) Informative log messages public void Info(string message, params object[] args) Parameters message string args object[] Trace(string, params object[]) Informative log messages public void Trace(string message, params object[] args) Parameters message string args object[] Warning(string, params object[]) Warning log messages public void Warning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/DiscordRPC.Logging.ILogger.html": {
    "href": "api/DiscordRPC.Logging.ILogger.html",
    "title": "Interface ILogger | Discord RPC C#",
    "summary": "Interface ILogger Namespace DiscordRPC.Logging Assembly DiscordRPC.dll Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. public interface ILogger Properties Level The level of logging to apply to this logger. LogLevel Level { get; set; } Property Value LogLevel Methods Error(string, params object[]) Error log messsages void Error(string message, params object[] args) Parameters message string args object[] Info(string, params object[]) Informative log messages void Info(string message, params object[] args) Parameters message string args object[] Trace(string, params object[]) Debug trace messeages used for debugging internal elements. void Trace(string message, params object[] args) Parameters message string args object[] Warning(string, params object[]) Warning log messages void Warning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/DiscordRPC.Logging.LogLevel.html": {
    "href": "api/DiscordRPC.Logging.LogLevel.html",
    "title": "Enum LogLevel | Discord RPC C#",
    "summary": "Enum LogLevel Namespace DiscordRPC.Logging Assembly DiscordRPC.dll Level of logging to use. public enum LogLevel Fields Error = 4 Only Errors are logged Info = 2 Info, Warning and Errors are logged None = 256 Nothing is logged Trace = 1 Trace, Info, Warning and Errors are logged Warning = 3 Warning and Errors are logged"
  },
  "api/DiscordRPC.Logging.NullLogger.html": {
    "href": "api/DiscordRPC.Logging.NullLogger.html",
    "title": "Class NullLogger | Discord RPC C#",
    "summary": "Class NullLogger Namespace DiscordRPC.Logging Assembly DiscordRPC.dll Ignores all log events public class NullLogger : ILogger Inheritance object NullLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Level The level of logging to apply to this logger. public LogLevel Level { get; set; } Property Value LogLevel Methods Error(string, params object[]) Error log messsages public void Error(string message, params object[] args) Parameters message string args object[] Info(string, params object[]) Informative log messages public void Info(string message, params object[] args) Parameters message string args object[] Trace(string, params object[]) Informative log messages public void Trace(string message, params object[] args) Parameters message string args object[] Warning(string, params object[]) Warning log messages public void Warning(string message, params object[] args) Parameters message string args object[]"
  },
  "api/DiscordRPC.Logging.html": {
    "href": "api/DiscordRPC.Logging.html",
    "title": "Namespace DiscordRPC.Logging | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Logging Classes ConsoleLogger Logs the outputs to the console using WriteLine() FileLogger Logs the outputs to a file NullLogger Ignores all log events Interfaces ILogger Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. Enums LogLevel Level of logging to use."
  },
  "api/DiscordRPC.Message.CloseMessage.html": {
    "href": "api/DiscordRPC.Message.CloseMessage.html",
    "title": "Class CloseMessage | Discord RPC C#",
    "summary": "Class CloseMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called when the IPC has closed. public class CloseMessage : IMessage Inheritance object IMessage CloseMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code The closure code public int Code { get; } Property Value int Reason The reason for the close public string Reason { get; } Property Value string Type The type of message public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.ConnectionEstablishedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionEstablishedMessage.html",
    "title": "Class ConnectionEstablishedMessage | Discord RPC C#",
    "summary": "Class ConnectionEstablishedMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll The connection to the discord client was succesfull. This is called before Ready. public class ConnectionEstablishedMessage : IMessage Inheritance object IMessage ConnectionEstablishedMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConnectedPipe The pipe we ended up connecting too public int ConnectedPipe { get; } Property Value int Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.ConnectionFailedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionFailedMessage.html",
    "title": "Class ConnectionFailedMessage | Discord RPC C#",
    "summary": "Class ConnectionFailedMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Failed to establish any connection with discord. Discord is potentially not running? public class ConnectionFailedMessage : IMessage Inheritance object IMessage ConnectionFailedMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FailedPipe The pipe we failed to connect too. public int FailedPipe { get; } Property Value int Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.ErrorCode.html": {
    "href": "api/DiscordRPC.Message.ErrorCode.html",
    "title": "Enum ErrorCode | Discord RPC C#",
    "summary": "Enum ErrorCode Namespace DiscordRPC.Message Assembly DiscordRPC.dll The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation public enum ErrorCode Fields InvalidCommand = 4002 Invalid command was sent InvalidEvent = 4004 Invalid event was sent InvalidPayload = 4000 Invalid Payload received NotImplemented = 10 The functionality was not yet implemented PipeException = 1 The pipe had an exception ReadCorrupt = 2 The pipe received corrupted data Success = 0 Pipe was Successful UnknownError = 1000 Unknown Discord error"
  },
  "api/DiscordRPC.Message.ErrorMessage.html": {
    "href": "api/DiscordRPC.Message.ErrorMessage.html",
    "title": "Class ErrorMessage | Discord RPC C#",
    "summary": "Class ErrorMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Created when a error occurs within the ipc and it is sent to the client. public class ErrorMessage : IMessage Inheritance object IMessage ErrorMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code The Discord error code. [JsonProperty(\"code\")] public ErrorCode Code { get; } Property Value ErrorCode Message The message associated with the error code. [JsonProperty(\"message\")] public string Message { get; } Property Value string Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.IMessage.html": {
    "href": "api/DiscordRPC.Message.IMessage.html",
    "title": "Class IMessage | Discord RPC C#",
    "summary": "Class IMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Messages received from discord. public abstract class IMessage Inheritance object IMessage Derived CloseMessage ConnectionEstablishedMessage ConnectionFailedMessage ErrorMessage JoinMessage JoinRequestMessage PresenceMessage ReadyMessage SubscribeMessage UnsubscribeMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IMessage() Creates a new instance of the message public IMessage() Properties TimeCreated The time the message was created public DateTime TimeCreated { get; } Property Value DateTime Type The type of message received from discord public abstract MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.JoinMessage.html": {
    "href": "api/DiscordRPC.Message.JoinMessage.html",
    "title": "Class JoinMessage | Discord RPC C#",
    "summary": "Class JoinMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called when the Discord Client wishes for this process to join a game. D -> C. public class JoinMessage : IMessage Inheritance object IMessage JoinMessage Derived SpectateMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Secret The JoinSecret to connect with. [JsonProperty(\"secret\")] public string Secret { get; } Property Value string Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.JoinRequestMessage.html": {
    "href": "api/DiscordRPC.Message.JoinRequestMessage.html",
    "title": "Class JoinRequestMessage | Discord RPC C#",
    "summary": "Class JoinRequestMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called when some other person has requested access to this game. C -> D -> C. public class JoinRequestMessage : IMessage Inheritance object IMessage JoinRequestMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType User The discord user that is requesting access. [JsonProperty(\"user\")] public User User { get; } Property Value User"
  },
  "api/DiscordRPC.Message.MessageType.html": {
    "href": "api/DiscordRPC.Message.MessageType.html",
    "title": "Enum MessageType | Discord RPC C#",
    "summary": "Enum MessageType Namespace DiscordRPC.Message Assembly DiscordRPC.dll Type of message. public enum MessageType Fields Close = 1 The connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. ConnectionEstablished = 9 The connection to the discord client was succesfull. This is called before Ready. ConnectionFailed = 10 Failed to establish any connection with discord. Discord is potentially not running? Error = 2 A error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. Join = 6 The Discord Client wishes for this process to join a game. JoinRequest = 8 Another discord user requests permission to join this game. PresenceUpdate = 3 The Discord Client has updated the presence. Ready = 0 The Discord Client is ready to send and receive messages. Spectate = 7 The Discord Client wishes for this process to spectate a game. Subscribe = 4 The Discord Client has subscribed to an event. Unsubscribe = 5 The Discord Client has unsubscribed from an event."
  },
  "api/DiscordRPC.Message.PresenceMessage.html": {
    "href": "api/DiscordRPC.Message.PresenceMessage.html",
    "title": "Class PresenceMessage | Discord RPC C#",
    "summary": "Class PresenceMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Representation of the message received by discord when the presence has been updated. public class PresenceMessage : IMessage Inheritance object IMessage PresenceMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationID The ID of the application discord has set it for public string ApplicationID { get; } Property Value string Name The name of the application Discord has set it for public string Name { get; } Property Value string Presence The rich presence Discord has set public BaseRichPresence Presence { get; } Property Value BaseRichPresence Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.ReadyMessage.html": {
    "href": "api/DiscordRPC.Message.ReadyMessage.html",
    "title": "Class ReadyMessage | Discord RPC C#",
    "summary": "Class ReadyMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called when the ipc is ready to send arguments. public class ReadyMessage : IMessage Inheritance object IMessage ReadyMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Configuration The configuration of the connection [JsonProperty(\"config\")] public Configuration Configuration { get; set; } Property Value Configuration Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType User User the connection belongs too [JsonProperty(\"user\")] public User User { get; set; } Property Value User Version The version of the RPC [JsonProperty(\"v\")] public int Version { get; set; } Property Value int"
  },
  "api/DiscordRPC.Message.SpectateMessage.html": {
    "href": "api/DiscordRPC.Message.SpectateMessage.html",
    "title": "Class SpectateMessage | Discord RPC C#",
    "summary": "Class SpectateMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called when the Discord Client wishes for this process to spectate a game. D -> C. public class SpectateMessage : JoinMessage Inheritance object IMessage JoinMessage SpectateMessage Inherited Members JoinMessage.Secret IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.SubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.SubscribeMessage.html",
    "title": "Class SubscribeMessage | Discord RPC C#",
    "summary": "Class SubscribeMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called as validation of a subscribe public class SubscribeMessage : IMessage Inheritance object IMessage SubscribeMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Event The event that was subscribed too. public EventType Event { get; } Property Value EventType Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.UnsubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.UnsubscribeMessage.html",
    "title": "Class UnsubscribeMessage | Discord RPC C#",
    "summary": "Class UnsubscribeMessage Namespace DiscordRPC.Message Assembly DiscordRPC.dll Called as validation of a subscribe public class UnsubscribeMessage : IMessage Inheritance object IMessage UnsubscribeMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Event The event that was subscribed too. public EventType Event { get; } Property Value EventType Type The type of message received from discord public override MessageType Type { get; } Property Value MessageType"
  },
  "api/DiscordRPC.Message.html": {
    "href": "api/DiscordRPC.Message.html",
    "title": "Namespace DiscordRPC.Message | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Message Classes CloseMessage Called when the IPC has closed. ConnectionEstablishedMessage The connection to the discord client was succesfull. This is called before Ready. ConnectionFailedMessage Failed to establish any connection with discord. Discord is potentially not running? ErrorMessage Created when a error occurs within the ipc and it is sent to the client. IMessage Messages received from discord. JoinMessage Called when the Discord Client wishes for this process to join a game. D -> C. JoinRequestMessage Called when some other person has requested access to this game. C -> D -> C. PresenceMessage Representation of the message received by discord when the presence has been updated. ReadyMessage Called when the ipc is ready to send arguments. SpectateMessage Called when the Discord Client wishes for this process to spectate a game. D -> C. SubscribeMessage Called as validation of a subscribe UnsubscribeMessage Called as validation of a subscribe Enums ErrorCode The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation MessageType Type of message."
  },
  "api/DiscordRPC.Party.PrivacySetting.html": {
    "href": "api/DiscordRPC.Party.PrivacySetting.html",
    "title": "Enum Party.PrivacySetting | Discord RPC C#",
    "summary": "Enum Party.PrivacySetting Namespace DiscordRPC Assembly DiscordRPC.dll Privacy of the party public enum Party.PrivacySetting Fields Private = 0 The party is private, invites only. Public = 1 The party is public, anyone can join."
  },
  "api/DiscordRPC.Party.html": {
    "href": "api/DiscordRPC.Party.html",
    "title": "Class Party | Discord RPC C#",
    "summary": "Class Party Namespace DiscordRPC Assembly DiscordRPC.dll Structure representing the part the player is in. [Serializable] public class Party Inheritance object Party Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ID A unique ID for the player's current party / lobby / group. If this is not supplied, they player will not be in a party and the rest of the information will not be sent. Max 128 Bytes [JsonProperty(\"id\", NullValueHandling = NullValueHandling.Ignore)] public string ID { get; set; } Property Value string Max The maxium size of the party / lobby / group. This is required to be larger than Size. If it is smaller than the current party size, it will automatically be set too Size when the presence is sent. [JsonIgnore] public int Max { get; set; } Property Value int Privacy The privacy of the party [JsonProperty(\"privacy\", NullValueHandling = NullValueHandling.Include, DefaultValueHandling = DefaultValueHandling.Include)] public Party.PrivacySetting Privacy { get; set; } Property Value Party.PrivacySetting Size The current size of the players party / lobby / group. [JsonIgnore] public int Size { get; set; } Property Value int"
  },
  "api/DiscordRPC.RichPresence.html": {
    "href": "api/DiscordRPC.RichPresence.html",
    "title": "Class RichPresence | Discord RPC C#",
    "summary": "Class RichPresence Namespace DiscordRPC Assembly DiscordRPC.dll The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. public sealed class RichPresence : BaseRichPresence Inheritance object BaseRichPresence RichPresence Inherited Members BaseRichPresence.State BaseRichPresence.StateUrl BaseRichPresence.Details BaseRichPresence.DetailsUrl BaseRichPresence.Timestamps BaseRichPresence.Assets BaseRichPresence.Party BaseRichPresence.Secrets BaseRichPresence.Type BaseRichPresence.StatusDisplay BaseRichPresence.HasTimestamps() BaseRichPresence.HasAssets() BaseRichPresence.HasParty() BaseRichPresence.HasSecrets() BaseRichPresence.ToRichPresence() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Buttons The buttons to display in the presence. Max of 2 [JsonProperty(\"buttons\", NullValueHandling = NullValueHandling.Ignore)] public Button[] Buttons { get; set; } Property Value Button[] Methods Clone() Clones the presence into a new instance. Used for thread safe writing and reading. This function will ignore properties if they are in a invalid state. public RichPresence Clone() Returns RichPresence HasButtons() Does the Rich Presence have any buttons? public bool HasButtons() Returns bool WithAssets(Assets) Sets the assets of the Rich Presence. See also Assets. public RichPresence WithAssets(Assets assets) Parameters assets Assets The names of the images to use and the tooltips to give those images. Returns RichPresence The modified Rich Presence. WithButtons(Button, Button) Sets the Rich Presence's buttons. public RichPresence WithButtons(Button topButton, Button bottomButton = null) Parameters topButton Button The top button to display bottomButton Button The optional bottom button to display Returns RichPresence The modified Rich Presence. WithDetails(string) Sets the details of the Rich Presence. See also Details. public RichPresence WithDetails(string details) Parameters details string What the user is currently doing. Returns RichPresence The modified Rich Presence. WithDetailsUrl(string) Sets the details URL of the Rich Presence. See also DetailsUrl. public RichPresence WithDetailsUrl(string detailsUrl) Parameters detailsUrl string Details URL when clicking on the details text. Returns RichPresence The modified Rich Presence. WithParty(Party) Sets the Rich Presence's party. See also Party. public RichPresence WithParty(Party party) Parameters party Party The party the player is currently in. Returns RichPresence The modified Rich Presence. WithSecrets(Secrets) Sets the Rich Presence's secrets. See also Secrets. public RichPresence WithSecrets(Secrets secrets) Parameters secrets Secrets The secrets used for Join / Spectate. Returns RichPresence The modified Rich Presence. WithState(string) Sets the state of the Rich Presence. See also State. public RichPresence WithState(string state) Parameters state string The user's current Party status. Returns RichPresence The modified Rich Presence. WithStateUrl(string) Sets the state URL of the Rich Presence. See also StateUrl. public RichPresence WithStateUrl(string stateUrl) Parameters stateUrl string State URL when clicking on the state text. Returns RichPresence The modified Rich Presence. WithStatusDisplay(StatusDisplayType) Sets the display type for the status. See also StatusDisplayType. public RichPresence WithStatusDisplay(StatusDisplayType statusDisplay) Parameters statusDisplay StatusDisplayType Returns RichPresence The modified Rich Presence. WithTimestamps(Timestamps) Sets the timestamp of the Rich Presence. See also Timestamps. public RichPresence WithTimestamps(Timestamps timestamps) Parameters timestamps Timestamps The time elapsed / remaining time data. Returns RichPresence The modified Rich Presence. WithType(ActivityType) Sets the type of the Rich Presence. See also ActivityType. public RichPresence WithType(ActivityType type) Parameters type ActivityType The status type Returns RichPresence The modified Rich Presence. Operators implicit operator bool(RichPresence) Operator that converts a presence into a boolean for null checks. public static implicit operator bool(RichPresence presesnce) Parameters presesnce RichPresence Returns bool"
  },
  "api/DiscordRPC.Secrets.html": {
    "href": "api/DiscordRPC.Secrets.html",
    "title": "Class Secrets | Discord RPC C#",
    "summary": "Class Secrets Namespace DiscordRPC Assembly DiscordRPC.dll The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. [Serializable] public class Secrets Inheritance object Secrets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Encoding The encoding the secret generator is using public static Encoding Encoding { get; } Property Value Encoding JoinSecret The secret data that will tell the client how to connect to the game to play. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 characters [JsonProperty(\"join\", NullValueHandling = NullValueHandling.Ignore)] public string JoinSecret { get; set; } Property Value string MatchSecret The unique match code to distinguish different games/lobbies. Use CreateSecret(Random) to get an appropriately sized secret. This cannot be null and must be supplied for the Join / Spectate feature to work. Max Length of 128 characters [Obsolete(\"This feature has been deprecated my Mason in issue #152 on the offical library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.\")] [JsonProperty(\"match\", NullValueHandling = NullValueHandling.Ignore)] public string MatchSecret { get; set; } Property Value string SecretLength The length of a secret in bytes. public static int SecretLength { get; } Property Value int SpectateSecret The secret data that will tell the client how to connect to the game to spectate. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 characters [JsonProperty(\"spectate\", NullValueHandling = NullValueHandling.Ignore)] public string SpectateSecret { get; set; } Property Value string Methods CreateFriendlySecret(Random) Creates a secret word using more readable friendly characters. Useful for debugging purposes. This is not a cryptographic function and should NOT be used for sensitive information. public static string CreateFriendlySecret(Random random) Parameters random Random The random used to generate the characters Returns string CreateSecret(Random) Creates a new secret. This is NOT a cryptographic function and should NOT be used for sensitive information. This is mainly provided as a way to generate quick IDs. public static string CreateSecret(Random random) Parameters random Random The random to use Returns string Returns a SecretLength sized string with random characters from Encoding"
  },
  "api/DiscordRPC.StatusDisplayType.html": {
    "href": "api/DiscordRPC.StatusDisplayType.html",
    "title": "Enum StatusDisplayType | Discord RPC C#",
    "summary": "Enum StatusDisplayType Namespace DiscordRPC Assembly DiscordRPC.dll Rich Presence Display type public enum StatusDisplayType Fields Details = 2 Displays the rich presence details \"Listening to Never Gonna Give You Up\" Name = 0 Displays the rich presence name \"Listening to Spotify\" State = 1 Displays the rich presence state \"Listening to Rick Astley\""
  },
  "api/DiscordRPC.Timestamps.html": {
    "href": "api/DiscordRPC.Timestamps.html",
    "title": "Class Timestamps | Discord RPC C#",
    "summary": "Class Timestamps Namespace DiscordRPC Assembly DiscordRPC.dll Structure representing the start and endtimes of a match. [Serializable] public class Timestamps Inheritance object Timestamps Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Timestamps() Creates a empty timestamp object public Timestamps() Timestamps(DateTime) Creates a timestamp with the set start time public Timestamps(DateTime start) Parameters start DateTime Timestamps(DateTime, DateTime) Creates a timestamp with a set duration public Timestamps(DateTime start, DateTime end) Parameters start DateTime The start time end DateTime The end time Properties End The time the match will end. When included (not-null), the time in the rich presence will be shown as \"00:01 remaining\". This will override the \"elapsed\" to \"remaining\". [JsonIgnore] public DateTime? End { get; set; } Property Value DateTime? EndUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the End. End [JsonProperty(\"end\", NullValueHandling = NullValueHandling.Ignore)] public ulong? EndUnixMilliseconds { get; set; } Property Value ulong? Now A new timestamp that starts from the current time. public static Timestamps Now { get; } Property Value Timestamps Start The time that match started. When included (not-null), the time in the rich presence will be shown as \"00:01 elapsed\". [JsonIgnore] public DateTime? Start { get; set; } Property Value DateTime? StartUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the Start. [JsonProperty(\"start\", NullValueHandling = NullValueHandling.Ignore)] public ulong? StartUnixMilliseconds { get; set; } Property Value ulong? Methods FromTimeSpan(double) Creates a new timestamp starting at the current time and ending in the supplied timespan public static Timestamps FromTimeSpan(double seconds) Parameters seconds double How long the Timestamp will last for in seconds. Returns Timestamps Returns a new timestamp with given duration. FromTimeSpan(TimeSpan) Creates a new timestamp starting at current time and ending in the supplied timespan public static Timestamps FromTimeSpan(TimeSpan timespan) Parameters timespan TimeSpan How long the Timestamp will last for. Returns Timestamps Returns a new timestamp with given duration. FromUnixMilliseconds(ulong) Converts a Unix Epoch time into a DateTime. public static DateTime FromUnixMilliseconds(ulong unixTime) Parameters unixTime ulong The time in milliseconds since 1970 / 01 / 01 Returns DateTime ToUnixMilliseconds(DateTime) Converts a DateTime into a Unix Epoch time (in milliseconds). public static ulong ToUnixMilliseconds(DateTime date) Parameters date DateTime The datetime to convert Returns ulong"
  },
  "api/DiscordRPC.User.AvatarDecorationData.html": {
    "href": "api/DiscordRPC.User.AvatarDecorationData.html",
    "title": "Struct User.AvatarDecorationData | Discord RPC C#",
    "summary": "Struct User.AvatarDecorationData Namespace DiscordRPC Assembly DiscordRPC.dll public struct User.AvatarDecorationData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Asset [JsonProperty(\"asset\")] public readonly string Asset { get; } Property Value string SKU [JsonProperty(\"skuId\")] public readonly string SKU { get; } Property Value string"
  },
  "api/DiscordRPC.User.AvatarFormat.html": {
    "href": "api/DiscordRPC.User.AvatarFormat.html",
    "title": "Enum User.AvatarFormat | Discord RPC C#",
    "summary": "Enum User.AvatarFormat Namespace DiscordRPC Assembly DiscordRPC.dll Possible formats for avatars public enum User.AvatarFormat Fields GIF = 3 Graphics Interchange Format (.gif) Animated avatars that Discord Nitro users are able to use. If the user doesn't have an animated avatar, then it will just be a single frame gif. JPEG = 1 Joint Photographic Experts Group format (.jpeg) The format most cameras use. Lossy and does not support transparent avatars. PNG = 0 Portable Network Graphics format (.png) Losses format that supports transparent avatars. Most recommended for stationary formats with wide support from many libraries. WebP = 2 WebP format (.webp) Picture only version of WebM. Pronounced \"weeb p\"."
  },
  "api/DiscordRPC.User.AvatarSize.html": {
    "href": "api/DiscordRPC.User.AvatarSize.html",
    "title": "Enum User.AvatarSize | Discord RPC C#",
    "summary": "Enum User.AvatarSize Namespace DiscordRPC Assembly DiscordRPC.dll Possible square sizes of avatars. public enum User.AvatarSize Fields x1024 = 1024 1024 x 1024 pixels. x128 = 128 128 x 128 pixels. x16 = 16 16 x 16 pixels. x2048 = 2048 2048 x 2048 pixels. x256 = 256 256 x 256 pixels. x32 = 32 32 x 32 pixels. x512 = 512 512 x 512 pixels. x64 = 64 64 x 64 pixels."
  },
  "api/DiscordRPC.User.Flag.html": {
    "href": "api/DiscordRPC.User.Flag.html",
    "title": "Enum User.Flag | Discord RPC C#",
    "summary": "Enum User.Flag Namespace DiscordRPC Assembly DiscordRPC.dll A flag on the user account [Flags] public enum User.Flag Fields ActiveDeveloper = 4194304 User is an Active Developer BotHttpInteractions = 524288 Bot uses only HTTP interactions and is shown in the online member list BugHunter = 8 Bug Hunter Level 1 BugHunterLevel2 = 16384 Bug Hunter Level 2 CertifiedModerator = 262144 Moderator Programs Alumni EarlySupporter = 512 Early Nitro Supporter Employee = 1 Discord Employee HouseBalance = 256 House Balance Member HouseBravery = 64 House Bravery Member HouseBrilliance = 128 House Brilliance Member HypeSquad = 4 HypeSquad Events Member None = 0 No flag Partner = 2 Partnered Server Owner TeamUser = 1024 User is a team VerifiedBot = 65536 Verified Bot VerifiedDeveloper = 131072 Early Verified Bot Developer"
  },
  "api/DiscordRPC.User.PremiumType.html": {
    "href": "api/DiscordRPC.User.PremiumType.html",
    "title": "Enum User.PremiumType | Discord RPC C#",
    "summary": "Enum User.PremiumType Namespace DiscordRPC Assembly DiscordRPC.dll Type of premium public enum User.PremiumType Fields Nitro = 2 Nitro. Access to all premium features NitroBasic = 3 Nitro Basic. Access to mostpremium features NitroClassic = 1 Nitro Classic. The precursor to the NitroBasic None = 0 No subscription"
  },
  "api/DiscordRPC.User.html": {
    "href": "api/DiscordRPC.User.html",
    "title": "Class User | Discord RPC C#",
    "summary": "Class User Namespace DiscordRPC Assembly DiscordRPC.dll Object representing a Discord user. This is used for join requests. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Avatar The hash of the user's avatar. To get a URL for the avatar, use the GetAvatarURL(AvatarFormat, AvatarSize). [JsonProperty(\"avatar\")] public string Avatar { get; } Property Value string Remarks If the user has a default Discord avatar, this value will be null. GetAvatarURL(AvatarFormat, AvatarSize) will still return the correct default avatar. AvatarDecoration The SKU and hash of the users avatar decoration. To get a URL for the decoration, use the GetAvatarDecorationURL(). [JsonProperty(\"avatar_decoration_data\")] public User.AvatarDecorationData? AvatarDecoration { get; } Property Value User.AvatarDecorationData? Bot Whether the user belongs to an OAuth2 application. [JsonProperty(\"bot\")] public bool Bot { get; } Property Value bool CdnEndpoint The endpoint for the CDN. Normally cdn.discordapp.com. public string CdnEndpoint { get; } Property Value string Discriminator The discriminator of the user. [JsonProperty(\"discriminator\")] [Obsolete(\"Discord no longer uses discriminators.\")] public int Discriminator { get; } Property Value int Remarks If the user has migrated to unique a Username, the discriminator will always be 0. DisplayName The display name of the user [JsonProperty(\"global_name\")] public string DisplayName { get; } Property Value string Remarks This will be empty if the user has not set a global display name. Flags The flags on a users account, often represented as a badge. [JsonProperty(\"flags\", NullValueHandling = NullValueHandling.Ignore)] public User.Flag Flags { get; } Property Value User.Flag ID The snowflake ID of the user. [JsonProperty(\"id\")] public ulong ID { get; } Property Value ulong IsAvatarAnimated The avatar is animated public bool IsAvatarAnimated { get; } Property Value bool Premium The premium type of the user. [JsonProperty(\"premium_type\", NullValueHandling = NullValueHandling.Ignore)] public User.PremiumType Premium { get; } Property Value User.PremiumType Username The username of the player. [JsonProperty(\"username\")] public string Username { get; } Property Value string Methods GetAvatarDecorationURL() Gets a URL to the user's avatar decoration. public string GetAvatarDecorationURL() Returns string URL to the discord CDN for the current avatar decoration, otherwise null. Remarks The Image will be a Animated PNG. GetAvatarDecorationURL(AvatarFormat) Gets a URL to the user's avatar decoration. public string GetAvatarDecorationURL(User.AvatarFormat format) Parameters format User.AvatarFormat The format of the decoration Returns string URL to the discord CDN for the current avatar decoration, otherwise null. Remarks The avatar formats do not behave like User Avatars: PNG are Animated PNG GIF will respond with 415 Unsupported Media Type WebP are not animated JPEG do not have transparency Additionally, size is not support and makes no difference to the resulting image. GetAvatarExtension(AvatarFormat) Returns the file extension of the specified format. public string GetAvatarExtension(User.AvatarFormat format) Parameters format User.AvatarFormat The format to get the extention off Returns string Returns a period prefixed file extension. GetAvatarURL() Gets a URL to the user's avatar PNG. If the user does not have an avatar, a URL to a default avatar is returned. public string GetAvatarURL() Returns string URL to the discord CDN for the particular avatar Remarks The file returned will be 128x128px. GetAvatarURL(AvatarFormat) Gets a URL to the user's avatar with the specified format. If the user does not have an avatar, a URL to a default avatar is returned. public string GetAvatarURL(User.AvatarFormat format) Parameters format User.AvatarFormat The format of the target avatar Returns string URL to the discord CDN for the particular avatar Remarks The file returned will be 128x128px. The default avatar only supports the PNG format. Exceptions BadImageFormatException The user has a default avatar but a format other than PNG is requested. GetAvatarURL(AvatarFormat, AvatarSize) Gets a URL to the user's avatar with the specified format and size. If the user does not have an avatar, a URL to a default avatar is returned. public string GetAvatarURL(User.AvatarFormat format, User.AvatarSize size) Parameters format User.AvatarFormat The format of the target avatar size User.AvatarSize The optional size of the avatar you wish for. Returns string URL to the discord CDN for the particular avatar Remarks The default avatar only supports the PNG format. Exceptions BadImageFormatException The user has a default avatar but a format other than PNG is requested. ToString() Formats the user into a displayable format. If the user has a DisplayName, then this will be used. If the user still has a discriminator, then this will return the form of `Username#Discriminator`. public override string ToString() Returns string String of the user that can be used for display."
  },
  "api/DiscordRPC.html": {
    "href": "api/DiscordRPC.html",
    "title": "Namespace DiscordRPC | Discord RPC C#",
    "summary": "Namespace DiscordRPC Classes Assets Information about the pictures used in the Rich Presence. BaseRichPresence The base rich presence structure Button A Rich Presence button. Configuration Configuration of the current RPC connection DiscordRpcClient A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. Party Structure representing the part the player is in. RichPresence The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. Timestamps Structure representing the start and endtimes of a match. User Object representing a Discord user. This is used for join requests. Structs User.AvatarDecorationData Enums ActivityType Rich Presence activity type EventType The type of event receieved by the RPC. A flag type that can be combined. Party.PrivacySetting Privacy of the party StatusDisplayType Rich Presence Display type User.AvatarFormat Possible formats for avatars User.AvatarSize Possible square sizes of avatars. User.Flag A flag on the user account User.PremiumType Type of premium"
  },
  "articles/features/activity_types.html": {
    "href": "articles/features/activity_types.html",
    "title": "Activity Types | Discord RPC C#",
    "summary": "Activity Types Discord now lets you reference several activity types. You can use these types to change how your application presents itself to other users. Below is a table of the Activity Types and their different modes. Activity Type Example Playing Listening Watching Competing Note Timers cannot easily controlled. Discord will always show some form of timer and a progress bar is only available on some types."
  },
  "articles/features/assets.html": {
    "href": "articles/features/assets.html",
    "title": "Assets | Discord RPC C#",
    "summary": "Assets Your Rich Presence can have a small and a large image displayed instead of its default icon called Assets. These assets are ideal for representing maps, characters, loadouts, or other situational information about your game. Static Assets You can upload new assets and given them a key in the Discord Application → App → Rich Presence → Art Assets. This is the prefered way as they are easily referenced by a key and doesn't require an external web server. Once uploaded, you can assign them to your Activity like so: client.SetPresence(new RichPresence() { Type = ActivityType.Playing, Details = \"A Basic Example\", State = \"In Game\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"koala\" }, }); Which results in the image: Tip By providing LargeImageText or SmallImageText, you create a tooltip over the icon. Use this to provide additional information. Dynamic Assets Discord has relaxed on its limitation with these assets and you are now able to use Dynamic Assets. These allow you to provide a link that match the requirements and Discord will use the image at that url. For best and consistent results, it is easier to use the upload/key solution previously discussed. However, there are situations where you might want to use this such as for Album Art or user-generated content (although you should restrict this to avoid NSFW items). Note Discord will make a request on behalf of the user. Some services will have hot-link protection and block Discord from using their images. You should use your own service to serve these images. As an example, suppose I wish to display the album cover for Duran Druan's \"Future Past\", found on the Music Brainz API: // omitted: // HTTP GET https://coverartarchive.org/release/6bf261f9-f18b-4ba8-92be-7afc36575f2d client.SetPresence(new RichPresence() { Type = ActivityType.Listening, Details = \"Invisible\", State = \"Duran Duran\", Timestamps = Timestamps.FromTimeSpan(191), Assets = new Assets() { LargeImageKey = \"https://coverartarchive.org/release/6bf261f9-f18b-4ba8-92be-7afc36575f2d/33192928727-500.jpg\", // Links to the image LargeImageUrl = \"https://music.youtube.com/watch?v=SMCd5zrsFpE\" // Links to the song when clicked LargeImageText = \"Future Past\", }, }); This will load the image dynamically and display: Warning The maximum length of the Key field is 256 characters regardless if you are using a URL of a Key. Make sure the URL you provide is within this limit. You may need to provide a URL shortener/proxy for your application."
  },
  "articles/features/buttons.html": {
    "href": "articles/features/buttons.html",
    "title": "Buttons | Discord RPC C#",
    "summary": "Buttons Everyone's favourite, buttons! Buttons allow you to display clickable links inside your presence. They take an external URL and will redirect the user to it on visit. Note You are able to display 2 buttons at once as part of your presence. Warning You are unable to view buttons or click on them for your own activity. Only other users can see and click on the buttons. client.SetPresence(new RichPresence() { Details = \"A Basic Example\", State = \"In Game\", Buttons = new Button[] { new Button() { Label = \"Fish\", Url = \"https://lachee.dev/\" }, new Button() { Label = \"Sticks\", Url = \"https://en.wikipedia.org/wiki/Stick\" } } });"
  },
  "articles/features/timestamps.html": {
    "href": "articles/features/timestamps.html",
    "title": "Timestamps | Discord RPC C#",
    "summary": "Timestamps You can display timers and progress in your activity. However, Discord likes to change their mind on how these are displayed. Below is a matrix of all the variety of timers you can set and what they will do. Activity Type / Timestamps null Timestamps.Now Timestamps.FromTimespan Playing Listening Watching Competing Your control over what is displayed is limited. You use to be able to set a count down timer in a Playing activity, but Discord has since removed that. Now the only purpose of setting a timestamp is for Listening and Watching activities. As an example, the following snippet of code will make it as if you are playing a Video. client.SetPresence(new RichPresence() { Type = ActivityType.Watching, StatusDisplay = StatusDisplayType.Details, Details = \"Skibidi Toilet - Season 1\", State = \"DaFuq!?Boom!\", Timestamps = Timestamps.FromTimeSpan(66), }); Tip This library provides a variety of ways to set the time. The Timestamps.FromTimeSpan will allow you to use seconds, or a System.DateTime.TimeSpan."
  },
  "articles/getting_started/monogame.html": {
    "href": "articles/getting_started/monogame.html",
    "title": "Mono Game Setup | Discord RPC C#",
    "summary": "Mono Game Setup Currently no guide for Mono Game setup. Please follow the Standard Guide and include the follow files from the Unity Package: The Unity Named Pipes Library The Lachee/Discord-RPC-Unity Named Pipe Help Wanted Here Looking for those who have experience with Mono Game and implementing this library into their projects. If you have managed to successfully use this library in your project, please contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/getting_started/standard.html": {
    "href": "articles/getting_started/standard.html",
    "title": "Standard | Discord RPC C#",
    "summary": "Standard The standard guide for all .NET projects. Download First the library must be downloaded. For standard projects within the .NET enviorment, a nuget package is available and is updated to the latest release. PM> Install-Package DiscordRichPresence A build of the library itself can be located in the AppVeyor Artifacts Usage The library has 3 phases that must be followed, Initialization Rich Presence Setting Deinitialization and Disposal You can set the Rich Presence of your app at any time while the client object has been constructed. The client will store the state of the presence and automatically resend it once initialized again. Initialization The creation of the client should happen once in the lifetime of the app. Where you put the constructor is upto your application design principles, but in general its always a good idea to put it in your initializers. The client should be ideally treated like a singleton and only ever created once. Multiple instances of the client can conflict with each other and cause unpredictable results within Discord and the end users Rich Presence. public DiscordRpcClient Client { get; private set;} void Setup() { Client = new DiscordRpcClient(\"my_client_id\"); //Creates the client Client.Initialize(); //Connects the client } Note that the Initialize() can be called later and the current presence state will be re-sent to the Discord Client. Setting Rich Presence Setting Rich Presence is easy once the client has been initialized: //Set Presence client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); You may call this as regularly as you wish, the default behaviour of the application will ignore duplicate presence and Discord itself will handle ratelimiting. With that said, its always a good idea to only set the presence when there is actual change, to avoid any overheads. Disposal It is important that the client is properly disposed when finished. This will safely disconnect from Discord and dispose of the resources correctly. If you have any issues with ghosting (particularly in Unity3D), make sure you dispose the client. //Dispose client void Cleanup() { client.Dispose(); } Events By defaults, events will be executed as they occur. This means they are executed on the RPC Thread, and not on the main. For most applications, this works fine and is treated as a normal event from any other library you may use. However, for applications where thread-safety is paramount (such as Game Engines), you may need to disable this feature and manually invoke events on your calling thread like so: void Start() { //Creates a new client, telling it not to automatically invoke the events on RPC thread. Client = new DiscordRpcClient(\"my_client_id\", autoEvents: false); Client.Initialize(); } void Update() { //Invoke the events once per-frame. The events will be executed on calling thread. Client.Invoke(); } Please note that this method is only required where cross-thread talk is a big no-no. Implementing this as a Timer would just defeat the purpose as they are threaded anyways. Further Reading If you wish to implement the Join and Spectate feature within your project (those buttons), please read Joining & Spectating Introduction to get started."
  },
  "articles/getting_started/unity3d.html": {
    "href": "articles/getting_started/unity3d.html",
    "title": "Unity3D | Discord RPC C#",
    "summary": "Unity3D Please visit the documentation for Lachee/Discord-RPC-Unity"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting started with DiscordRPC C# | Discord RPC C#",
    "summary": "Getting started with DiscordRPC C# Getting started with DiscordRPC-C# is easy! With automatic nuget packages and a fully fledge Unity3D package, you can get started in no time. Dependencies Newtonsoft.JSON .NET 3.5+ or Unity3D 5.5+ Select Project Type Standard .NET Project - Recommended. For most users that are making a .NET Application Lachee/Discord-RPC-Unity - For Unity3D users that want to add Rich Presence to their game. MonoGame Project / Modding / Godot - For developers using custom MonoGame engines or modding existing games. Need More Help? Still stuck? Make a new GitHub issue!"
  },
  "articles/join_spectate/intro.html": {
    "href": "articles/join_spectate/intro.html",
    "title": "Join / Spectate | Discord RPC C#",
    "summary": "Join / Spectate Discord Rich Presence can serve as a form of match maker for your game. You can display a \"Join\" and \"Spectate\" button on your Rich Presence to allow people to connect directly through discord. Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join.html": {
    "href": "articles/join_spectate/join.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join_requests.html": {
    "href": "articles/join_spectate/join_requests.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/spectate.html": {
    "href": "articles/join_spectate/spectate.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/guidelines.html": {
    "href": "articles/rich_presence/guidelines.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/intro.html": {
    "href": "articles/rich_presence/intro.html",
    "title": "Rich Presence | Discord RPC C#",
    "summary": "Rich Presence Rich Presence needs to be initially setup on your Discord Developer Portal and it's recommended to follow the Best Practices. Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "index.html": {
    "href": "index.html",
    "title": "Discord Rich Presence | Discord RPC C#",
    "summary": "Discord Rich Presence This is a C# implementation of the Discord RPC library which was originally written in C++. This avoids having to use the official C++ and instead provides a managed way of using the Rich Presence within the .NET environment*. While the official C++ library has been deprecated, this library has continued support and development for all your Rich Presence need, without requiring the Game SDK. Here are some key features of this library: Message Queuing Threaded Reads Managed Pipes* Error Handling & Error Checking with automatic reconnects Events from Discord (such as presence update and join requests) Full Rich Presence Implementation (including Join / Spectate) Inline Documented (for all your IntelliSense needs) Helper Functionality (eg: AvatarURL generator from Join Requests) Ghost Prevention (Tells Discord to clear the RP on disposal) Full Unity3D Editor (Contains all the tools, inspectors and helpers for a Unity3D game all in one package). Documentation All the documentation can be found lachee.github.io/discord-rpc-csharp/docs/ Installation Dependencies: Newtonsoft.Json .NET Standard 2.0 runtime or .NET Framework 4.5: fx 4.5, core 3.1, net 7.0, net 8.0, net 9.0 .NET Project For projects that target either the .NET Standard or .NET Framework, you can get the package on nuget: PM> Install-Package DiscordRichPresence You can also Download or Build your own version of the library if you have more specific requirements. Unity3D Game Engine Unity Package is being moved to Lachee/Discord-RPC-Unity. Please check the releases / documentation there. Usage The Discord.Example project within the solution contains example code, showing how to use all available features. For Unity Specific examples, check out the example project included. There are 3 important stages of usage, Initialization, Invoking and Deinitialization. It's important you follow all 3 stages to ensure proper behaviour of the library. Initialization This stage will setup the connection to Discord and establish the events. Once you have done the initialization you can call SetPresence and other variants as many times as you wish throughout your code. Please note that ideally this should only run once, otherwise conflicts may occur with them trying to access the same Discord client at the same time. public DiscordRpcClient client; //Called when your application first starts. //For example, just before your main loop, on OnEnable for unity. void Initialize() { /* Create a Discord client NOTE: If you are using Unity3D, you must use the full constructor and define the pipe connection. */ client = new DiscordRpcClient(\"my_client_id\"); //Set the logger client.Logger = new ConsoleLogger() { Level = LogLevel.Warning }; //Subscribe to events client.OnReady += (sender, e) => { Console.WriteLine(\"Received Ready from user {0}\", e.User.Username); }; client.OnPresenceUpdate += (sender, e) => { Console.WriteLine(\"Received Update! {0}\", e.Presence); }; //Connect to the RPC client.Initialize(); //Set the rich presence //Call this as many times as you want and anywhere in your code. client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); } Invoking Invoking is optional. Use this when thread safety is paramount. The client will store messages from the pipe and won't invoke them until you call Invoke() or DequeueMessages(). It does this because the pipe is working on another thread, and manually invoking ensures proper thread safety and order of operations (especially important in Unity3D applications). In order to enable this method of event calling, you need to set it in the constructor of the DiscordRpcClient under autoEvents. //The main loop of your application, or some sort of timer. Literally the Update function in Unity3D void Update() { //Invoke all the events, such as OnPresenceUpdate client.Invoke(); }; Here is an example on how a Timer could be used to invoke the events for a WinForm var timer = new System.Timers.Timer(150); timer.Elapsed += (sender, args) => { client.Invoke(); }; timer.Start(); Deinitialization It's important that you dispose your client before your application terminates. This will stop the threads, abort the pipe reads, and tell Discord to clear the presence. Failure to do so may result in a memory leak! //Called when your application terminates. //For example, just after your main loop, on OnDisable for unity. void Deinitialize() { client.Dispose(); } Examples To run the current example, either open the solution in Visual Studio and run the DiscordRPC.Example project or use Dotnet: dotnet run --project DiscordRPC.Example Building DiscordRPC Library dotnet build -c Release Unity3D If you wish to have barebones Unity3D implementation, you need to build the DiscordRPC.dll, the Unity Named Pipes Library and the UnityNamedPipe.cs. Put these in your own Unity Project and the .dlls in a folder called Plugins. UWP / .NET MAUI / WIN UI 3 For now, the library doesn't work on UWP applications until we find the issue and fix it. In order to make this library work with the WIN UI 3 related applications such as .NET MAUI, you need to define runFullTrust Capability inside Package.appxmanifest. Here is an example of how to add runFullTrust to your WIN UI 3 application: Package.appxmanifest: <?xml version=\"1.0\" encoding=\"utf-8\"?> <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\" xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\" xmlns:rescap=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\" IgnorableNamespaces=\"uap rescap\"> ... <Capabilities> <rescap:Capability Name=\"runFullTrust\" /> </Capabilities> </Package> If you use .NET MAUI or WIN UI 3 template for C#, it automatically puts runFullTrust capability. Tests There are currently no tests available to validate the library. This is a active issue and need help with this. The test suite will likely need a way to mock the RPC client. Contribution All contributions are welcome and I am happy for any contribution. However, there are some things that will not be accepted: Spelling only fixes (rude to only contribute to something copilot could do) Complete or large rewrites (unwanted work load to review) Dependency substitutions / removals / additions (these require a issue and discussion first) Support for features only provided by custom Discord clients Obviously AI additions For more information, please read CONTRIBUTING.md"
  }
}