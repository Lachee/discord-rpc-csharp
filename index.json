{
  "api/DiscordRPC.ActivityType.html": {
    "href": "api/DiscordRPC.ActivityType.html",
    "title": "Enum ActivityType | Discord RPC C#",
    "summary": "Enum ActivityType Rich Presence activity type Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum ActivityType Fields Name Description Competing Competing status type. Displays as \"Competing in ...\" Listening Listening status type. Displays as \"Listening to ...\" Playing Playing status type. Displays as \"Playing ...\" Watching Watching status type. Displays as \"Watching ...\""
  },
  "api/DiscordRPC.Assets.html": {
    "href": "api/DiscordRPC.Assets.html",
    "title": "Class Assets | Discord RPC C#",
    "summary": "Class Assets Information about the pictures used in the Rich Presence. Inheritance object Assets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Serializable] public class Assets Properties | Edit this page View Source IsLargeImageKeyExternal Gets if the large square image is from an external link Declaration [JsonIgnore] public bool IsLargeImageKeyExternal { get; } Property Value Type Description bool | Edit this page View Source IsSmallImageKeyExternal Gets if the small profile artwork is from an external link Declaration [JsonIgnore] public bool IsSmallImageKeyExternal { get; } Property Value Type Description bool | Edit this page View Source LargeImageID The ID of the large image. This is only set after Update Presence and will automatically become null when LargeImageKey is changed. Declaration [JsonIgnore] public ulong? LargeImageID { get; } Property Value Type Description ulong? | Edit this page View Source LargeImageKey Name of the uploaded image for the large profile artwork. Max 256 characters. Declaration [JsonProperty(\"large_image\", NullValueHandling = NullValueHandling.Ignore)] public string LargeImageKey { get; set; } Property Value Type Description string Remarks Allows URL to directly link to images. | Edit this page View Source LargeImageText The tooltip for the large square image. For example, \"Summoners Rift\" or \"Horizon Lunar Colony\". Max 128 characters. Declaration [JsonProperty(\"large_text\", NullValueHandling = NullValueHandling.Ignore)] public string LargeImageText { get; set; } Property Value Type Description string | Edit this page View Source SmallImageID The ID of the small image. This is only set after Update Presence and will automatically become null when SmallImageKey is changed. Declaration [JsonIgnore] public ulong? SmallImageID { get; } Property Value Type Description ulong? | Edit this page View Source SmallImageKey Name of the uploaded image for the small profile artwork. Max 256 characters. Declaration [JsonProperty(\"small_image\", NullValueHandling = NullValueHandling.Ignore)] public string SmallImageKey { get; set; } Property Value Type Description string Remarks Allows URL to directly link to images. | Edit this page View Source SmallImageText The tooltip for the small circle image. For example, \"LvL 6\" or \"Ultimate 85%\". Max 128 characters. Declaration [JsonProperty(\"small_text\", NullValueHandling = NullValueHandling.Ignore)] public string SmallImageText { get; set; } Property Value Type Description string"
  },
  "api/DiscordRPC.BaseRichPresence.html": {
    "href": "api/DiscordRPC.BaseRichPresence.html",
    "title": "Class BaseRichPresence | Discord RPC C#",
    "summary": "Class BaseRichPresence The base rich presence structure Inheritance object BaseRichPresence RichPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [JsonObject(MemberSerialization = MemberSerialization.OptIn)] [Serializable] public class BaseRichPresence Fields | Edit this page View Source _details Inernal inner detail string Declaration protected string _details Field Value Type Description string | Edit this page View Source _state Inernal inner state string Declaration protected string _state Field Value Type Description string Properties | Edit this page View Source Assets The names of the images to use and the tooltips to give those images. Declaration [JsonProperty(\"assets\", NullValueHandling = NullValueHandling.Ignore)] public Assets Assets { get; set; } Property Value Type Description Assets | Edit this page View Source Details What the user is currently doing. For example, \"Competitive - Total Mayhem\". Max 128 characters Declaration [JsonProperty(\"details\", NullValueHandling = NullValueHandling.Ignore)] public string Details { get; set; } Property Value Type Description string | Edit this page View Source Party The party the player is currently in. The ID must be set for this to be included in the RichPresence update. Declaration [JsonProperty(\"party\", NullValueHandling = NullValueHandling.Ignore)] public Party Party { get; set; } Property Value Type Description Party | Edit this page View Source Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. Make this object null if you do not wish too / unable too implement the Join / Request feature. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. Visit the Rich Presence How-To for more information. Declaration [JsonProperty(\"secrets\", NullValueHandling = NullValueHandling.Ignore)] public Secrets Secrets { get; set; } Property Value Type Description Secrets | Edit this page View Source State The user's current Party status. For example, \"Playing Solo\" or \"With Friends\". Max 128 characters Declaration [JsonProperty(\"state\", NullValueHandling = NullValueHandling.Ignore)] public string State { get; set; } Property Value Type Description string | Edit this page View Source StatusDisplay The display type for the status Declaration [JsonProperty(\"status_display_type\", NullValueHandling = NullValueHandling.Ignore)] public StatusDisplayType StatusDisplay { get; set; } Property Value Type Description StatusDisplayType | Edit this page View Source Timestamps The time elapsed / remaining time data. Declaration [JsonProperty(\"timestamps\", NullValueHandling = NullValueHandling.Ignore)] public Timestamps Timestamps { get; set; } Property Value Type Description Timestamps | Edit this page View Source Type The activity type Declaration [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public ActivityType Type { get; set; } Property Value Type Description ActivityType Methods | Edit this page View Source HasAssets() Does the Rich Presence have valid assets? Declaration public bool HasAssets() Returns Type Description bool | Edit this page View Source HasParty() Does the Rich Presence have a valid party? Declaration public bool HasParty() Returns Type Description bool | Edit this page View Source HasSecrets() Does the Rich Presence have valid secrets? Declaration public bool HasSecrets() Returns Type Description bool | Edit this page View Source HasTimestamps() Does the Rich Presence have valid timestamps? Declaration public bool HasTimestamps() Returns Type Description bool | Edit this page View Source ToRichPresence() Converts this BaseRichPresence to RichPresence Declaration public RichPresence ToRichPresence() Returns Type Description RichPresence Operators | Edit this page View Source implicit operator bool(BaseRichPresence) Operator that converts a presence into a boolean for null checks. Declaration public static implicit operator bool(BaseRichPresence presence) Parameters Type Name Description BaseRichPresence presence Returns Type Description bool"
  },
  "api/DiscordRPC.Button.html": {
    "href": "api/DiscordRPC.Button.html",
    "title": "Class Button | Discord RPC C#",
    "summary": "Class Button A Rich Presence button. Inheritance object Button Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public class Button Properties | Edit this page View Source Label Text shown on the button Max 31 bytes. Declaration [JsonProperty(\"label\")] public string Label { get; set; } Property Value Type Description string | Edit this page View Source Url The URL opened when clicking the button. Max 512 characters. Declaration [JsonProperty(\"url\")] public string Url { get; set; } Property Value Type Description string"
  },
  "api/DiscordRPC.Configuration.html": {
    "href": "api/DiscordRPC.Configuration.html",
    "title": "Class Configuration | Discord RPC C#",
    "summary": "Class Configuration Configuration of the current RPC connection Inheritance object Configuration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public class Configuration Properties | Edit this page View Source ApiEndpoint The Discord API endpoint that should be used. Declaration [JsonProperty(\"api_endpoint\")] public string ApiEndpoint { get; set; } Property Value Type Description string | Edit this page View Source CdnHost The CDN endpoint Declaration [JsonProperty(\"cdn_host\")] public string CdnHost { get; set; } Property Value Type Description string | Edit this page View Source Environment The type of environment the connection on. Usually Production. Declaration [JsonProperty(\"environment\")] public string Environment { get; set; } Property Value Type Description string"
  },
  "api/DiscordRPC.DiscordRpcClient.html": {
    "href": "api/DiscordRPC.DiscordRpcClient.html",
    "title": "Class DiscordRpcClient | Discord RPC C#",
    "summary": "Class DiscordRpcClient A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. Inheritance object DiscordRpcClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public sealed class DiscordRpcClient : IDisposable Constructors | Edit this page View Source DiscordRpcClient(string) Creates a new Discord RPC Client which can be used to send Rich Presence and receive Join / Spectate events. Declaration public DiscordRpcClient(string applicationID) Parameters Type Name Description string applicationID The ID of the application created at discord's developers portal. | Edit this page View Source DiscordRpcClient(string, int, ILogger, bool, INamedPipeClient) Creates a new Discord RPC Client which can be used to send Rich Presence and receive Join / Spectate events. This constructor exposes more advance features such as custom NamedPipeClients and Loggers. Declaration public DiscordRpcClient(string applicationID, int pipe = -1, ILogger logger = null, bool autoEvents = true, INamedPipeClient client = null) Parameters Type Name Description string applicationID The ID of the application created at discord's developers portal. int pipe The pipe to connect too. If -1, then the client will scan for the first available instance of Discord. ILogger logger The logger used to report messages. If null, then a NullLogger will be created and logs will be ignored. bool autoEvents Should events be automatically invoked from the RPC Thread as they arrive from discord? INamedPipeClient client The pipe client to use and communicate to discord through. If null, the default ManagedNamedPipeClient will be used. Properties | Edit this page View Source ApplicationID Gets the Application ID of the RPC Client. Declaration public string ApplicationID { get; } Property Value Type Description string | Edit this page View Source AutoEvents Indicates if the client will automatically invoke the events without Invoke() having to be called. Declaration public bool AutoEvents { get; } Property Value Type Description bool | Edit this page View Source Configuration The current configuration the connection is using. Only becomes available after a ready event. Declaration public Configuration Configuration { get; } Property Value Type Description Configuration | Edit this page View Source CurrentPresence The current presence that the client has. Gets set with SetPresence(RichPresence) and updated on OnPresenceUpdate. Declaration public RichPresence CurrentPresence { get; } Property Value Type Description RichPresence | Edit this page View Source CurrentUser The current discord user. This is updated with the ready event and will be null until the event is fired from the connection. Declaration public User CurrentUser { get; } Property Value Type Description User | Edit this page View Source HasRegisteredUriScheme Gets a value indicating if the client has registered a URI Scheme. If this is false, Join / Spectate events will fail. To register a URI Scheme, call RegisterUriScheme(string, string). Declaration public bool HasRegisteredUriScheme { get; } Property Value Type Description bool | Edit this page View Source IsDisposed The dispose state of the client object. Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsInitialized Represents if the client has been Initialize() Declaration public bool IsInitialized { get; } Property Value Type Description bool | Edit this page View Source Logger The logger used this client and its associated components. ILogger are not called safely and can come from any thread. It is upto the ILogger to account for this and apply appropriate thread safe methods. Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger | Edit this page View Source MaxQueueSize The maximum size of the message queue received from Discord. Declaration public int MaxQueueSize { get; } Property Value Type Description int | Edit this page View Source ProcessID Gets the ID of the process used to run the RPC Client. Discord tracks this process ID and waits for its termination. Defaults to the current application process ID. Declaration public int ProcessID { get; } Property Value Type Description int | Edit this page View Source ShutdownOnly Forces the connection to shutdown gracefully instead of just aborting the connection. This option helps prevents ghosting in applications where the Process ID is a host and the game is executed within the host (ie: the Unity3D editor). This will tell Discord that we have no presence and we are closing the connection manually, instead of waiting for the process to terminate. Declaration public bool ShutdownOnly { get; set; } Property Value Type Description bool | Edit this page View Source SkipIdenticalPresence Skips sending presences that are identical to the current one. Declaration public bool SkipIdenticalPresence { get; set; } Property Value Type Description bool | Edit this page View Source SteamID Gets the Steam ID of the RPC Client. This value can be null if none was supplied. Declaration public string SteamID { get; } Property Value Type Description string | Edit this page View Source Subscription Current subscription to events. Gets set with Subscribe(EventType), UnsubscribeMessage and updated on OnSubscribe, OnUnsubscribe. Declaration public EventType Subscription { get; } Property Value Type Description EventType | Edit this page View Source TargetPipe The pipe the discord client is on, ranging from 0 to 9. Use -1 to scan through all pipes. This property can be used for testing multiple clients. For example, if a Discord Client was on pipe 0, the Discord Canary is most likely on pipe 1. Declaration public int TargetPipe { get; } Property Value Type Description int Methods | Edit this page View Source ClearPresence() Clears the Rich Presence. Use this just before disposal to prevent ghosting. Declaration public void ClearPresence() | Edit this page View Source Deinitialize() Attempts to disconnect and deinitialize the IPC connection while retaining the settings. Declaration public void Deinitialize() | Edit this page View Source Dispose() Terminates the connection to Discord and disposes of the object. Declaration public void Dispose() | Edit this page View Source Initialize() Attempts to initalize a connection to the Discord IPC. Declaration public bool Initialize() Returns Type Description bool | Edit this page View Source Invoke() Dequeues all the messages from Discord, processes them and then invoke appropriate event handlers. This will process the message and update the internal state before invoking the events. Returns the messages that were invoked in the order they were invoked. This method cannot be used if AutoEvents is enabled. Declaration public IMessage[] Invoke() Returns Type Description IMessage[] Returns the messages that were invoked and in the order they were invoked. | Edit this page View Source RegisterUriScheme(string, string) Registers the application executable to a custom URI Scheme. This is required for the Join and Spectate features. Discord will run this custom URI Scheme to launch your application when a user presses either of the buttons. Declaration public bool RegisterUriScheme(string steamAppID = null, string executable = null) Parameters Type Name Description string steamAppID Optional Steam ID. If supplied, Discord will launch the game through steam instead of directly calling it. string executable The path to the executable. If null, the path to the current executable will be used instead. Returns Type Description bool | Edit this page View Source Respond(JoinRequestMessage, bool) Respond to a Join Request. All requests will timeout after 30 seconds. Because of the 30 second timeout, it is recommended to call Invoke() faster than every 15 seconds to give your users adequate time to respond to the request. Declaration public void Respond(JoinRequestMessage request, bool acceptRequest) Parameters Type Name Description JoinRequestMessage request The request that is being responded too. bool acceptRequest Accept the join request. | Edit this page View Source SetButton(Button, int) Updates only the Buttons of the CurrentPresence and updates the button with the given index. Returns the newly edited Rich Presence. Declaration public RichPresence SetButton(Button button, int index = 0) Parameters Type Name Description Button button The buttons of the Rich Presence int index The number of the button Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source SetPresence(RichPresence) Sets the Rich Presence. Declaration public void SetPresence(RichPresence presence) Parameters Type Name Description RichPresence presence The Rich Presence to set on the current Discord user. | Edit this page View Source SetSubscription(EventType) Sets the subscription to the events sent from Discord. Requires the UriScheme to be registered. Declaration public void SetSubscription(EventType type) Parameters Type Name Description EventType type The new subscription as a flag. Events selected in the flag will be subscribed too and the other events will be unsubscribed. | Edit this page View Source Subscribe(EventType) Subscribes to an event sent from discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. Declaration public void Subscribe(EventType type) Parameters Type Name Description EventType type The event type to subscribe to | Edit this page View Source SynchronizeState() Resends the current presence and subscription. This is used when Ready is called to keep the current state within discord. Declaration public void SynchronizeState() | Edit this page View Source Unsubscribe(EventType) Unsubscribe from the event sent by discord. Used for Join / Spectate feature. Requires the UriScheme to be registered. Declaration public void Unsubscribe(EventType type) Parameters Type Name Description EventType type The event type to unsubscribe from | Edit this page View Source Unubscribe(EventType) Declaration [Obsolete(\"Replaced with Unsubscribe\", true)] public void Unubscribe(EventType type) Parameters Type Name Description EventType type | Edit this page View Source Update(Action<RichPresence>) Updates the values assigned in the delegate passed Declaration public RichPresence Update(Action<RichPresence> func) Parameters Type Name Description Action<RichPresence> func Delegate used to update the rich presence Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateButtons(Button[]) Updates only the Buttons of the CurrentPresence and updates/removes the buttons. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateButtons(Button[] buttons = null) Parameters Type Name Description Button[] buttons The buttons of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateClearTime() Sets the start and end time of CurrentPresence to null and sends it to Discord. Declaration public RichPresence UpdateClearTime() Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateDetails(string) Updates only the Details of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateDetails(string details) Parameters Type Name Description string details The details of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateEndTime() Sets the end time of the CurrentPresence to now and sends the updated presence to Discord. Declaration public RichPresence UpdateEndTime() Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateEndTime(DateTime) Sets the end time of the CurrentPresence and sends the updated presence to Discord. Declaration public RichPresence UpdateEndTime(DateTime time) Parameters Type Name Description DateTime time The new time for the end Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateLargeAsset(string, string) Updates the large Assets of the CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. Declaration public RichPresence UpdateLargeAsset(string key = null, string tooltip = null) Parameters Type Name Description string key Optional: The new key to set the asset too string tooltip Optional: The new tooltip to display on the asset Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateParty(Party) Updates only the Party of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateParty(Party party) Parameters Type Name Description Party party The party of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdatePartySize(int) Updates the Size of the CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new NullReferenceException if the Party does not exist. Declaration public RichPresence UpdatePartySize(int size) Parameters Type Name Description int size The new size of the party. It cannot be greater than Max Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdatePartySize(int, int) Updates the Size of the CurrentPresence and sends the update presence to Discord. Returns the newly edited Rich Presence. Will return null if no presence exists and will throw a new NullReferenceException if the Party does not exist. Declaration public RichPresence UpdatePartySize(int size, int max) Parameters Type Name Description int size The new size of the party. It cannot be greater than Max int max The new size of the party. It cannot be smaller than Size Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateSecrets(Secrets) Updates the Secrets of the CurrentPresence and sends the updated presence to Discord. Will override previous secret entirely. Declaration public RichPresence UpdateSecrets(Secrets secrets) Parameters Type Name Description Secrets secrets The new secret to send to discord. Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateSmallAsset(string, string) Updates the small Assets of the CurrentPresence and sends the updated presence to Discord. Both key and tooltip are optional and will be ignored it null. Declaration public RichPresence UpdateSmallAsset(string key = null, string tooltip = null) Parameters Type Name Description string key Optional: The new key to set the asset too string tooltip Optional: The new tooltip to display on the asset Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateStartTime() Sets the start time of the CurrentPresence to now and sends the updated presence to Discord. Declaration public RichPresence UpdateStartTime() Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateStartTime(DateTime) Sets the start time of the CurrentPresence and sends the updated presence to Discord. Declaration public RichPresence UpdateStartTime(DateTime time) Parameters Type Name Description DateTime time The new time for the start Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateState(string) Updates only the State of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateState(string state) Parameters Type Name Description string state The state of the Rich Presence Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateStatusDisplayType(StatusDisplayType) Updates only the StatusDisplay of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateStatusDisplayType(StatusDisplayType type) Parameters Type Name Description StatusDisplayType type The type to display on the status Returns Type Description RichPresence Updated Rich Presence | Edit this page View Source UpdateType(ActivityType) Updates only the Type of the CurrentPresence and sends the updated presence to Discord. Returns the newly edited Rich Presence. Declaration public RichPresence UpdateType(ActivityType type) Parameters Type Name Description ActivityType type The type of the Rich Presence Returns Type Description RichPresence Updated Rich Presence Events | Edit this page View Source OnClose Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnCloseEvent OnClose Event Type Type Description OnCloseEvent | Edit this page View Source OnConnectionEstablished The connection to the discord client was succesfull. This is called before Ready. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnConnectionEstablishedEvent OnConnectionEstablished Event Type Type Description OnConnectionEstablishedEvent | Edit this page View Source OnConnectionFailed Failed to establish any connection with discord. Discord is potentially not running? If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnConnectionFailedEvent OnConnectionFailed Event Type Type Description OnConnectionFailedEvent | Edit this page View Source OnError Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnErrorEvent OnError Event Type Type Description OnErrorEvent | Edit this page View Source OnJoin Called when the Discord Client wishes for this process to join a game. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnJoinEvent OnJoin Event Type Type Description OnJoinEvent | Edit this page View Source OnJoinRequested Called when another discord user requests permission to join this game. This event is not invoked untill Invoke() is executed. Declaration public event OnJoinRequestedEvent OnJoinRequested Event Type Type Description OnJoinRequestedEvent | Edit this page View Source OnPresenceUpdate Called when the Discord Client has updated the presence. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnPresenceUpdateEvent OnPresenceUpdate Event Type Type Description OnPresenceUpdateEvent | Edit this page View Source OnReady Called when the discord client is ready to send and receive messages. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnReadyEvent OnReady Event Type Type Description OnReadyEvent | Edit this page View Source OnRpcMessage The RPC Connection has sent a message. Called before any other event and executed from the RPC Thread. Declaration public event OnRpcMessageEvent OnRpcMessage Event Type Type Description OnRpcMessageEvent | Edit this page View Source OnSpectate Called when the Discord Client wishes for this process to spectate a game. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnSpectateEvent OnSpectate Event Type Type Description OnSpectateEvent | Edit this page View Source OnSubscribe Called when the Discord Client has subscribed to an event. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnSubscribeEvent OnSubscribe Event Type Type Description OnSubscribeEvent | Edit this page View Source OnUnsubscribe Called when the Discord Client has unsubscribed from an event. If AutoEvents is true then this event will execute on a different thread. If it is not true however, then this event is not invoked untill Invoke() and will be on the calling thread. Declaration public event OnUnsubscribeEvent OnUnsubscribe Event Type Type Description OnUnsubscribeEvent Implements IDisposable"
  },
  "api/DiscordRPC.EventType.html": {
    "href": "api/DiscordRPC.EventType.html",
    "title": "Enum EventType | Discord RPC C#",
    "summary": "Enum EventType The type of event receieved by the RPC. A flag type that can be combined. Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Flags] public enum EventType Fields Name Description Join Called when the Discord Client wishes to enter a game to play. JoinRequest Called when another Discord Client has requested permission to join this game. None No event Spectate Called when the Discord Client wishes to enter a game to spectate"
  },
  "api/DiscordRPC.Events.OnCloseEvent.html": {
    "href": "api/DiscordRPC.Events.OnCloseEvent.html",
    "title": "Delegate OnCloseEvent | Discord RPC C#",
    "summary": "Delegate OnCloseEvent Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnCloseEvent(object sender, CloseMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event CloseMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnConnectionEstablishedEvent.html": {
    "href": "api/DiscordRPC.Events.OnConnectionEstablishedEvent.html",
    "title": "Delegate OnConnectionEstablishedEvent | Discord RPC C#",
    "summary": "Delegate OnConnectionEstablishedEvent The connection to the discord client was succesfull. This is called before OnReadyEvent. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnConnectionEstablishedEvent(object sender, ConnectionEstablishedMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event ConnectionEstablishedMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnConnectionFailedEvent.html": {
    "href": "api/DiscordRPC.Events.OnConnectionFailedEvent.html",
    "title": "Delegate OnConnectionFailedEvent | Discord RPC C#",
    "summary": "Delegate OnConnectionFailedEvent Failed to establish any connection with discord. Discord is potentially not running? Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnConnectionFailedEvent(object sender, ConnectionFailedMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event ConnectionFailedMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnErrorEvent.html": {
    "href": "api/DiscordRPC.Events.OnErrorEvent.html",
    "title": "Delegate OnErrorEvent | Discord RPC C#",
    "summary": "Delegate OnErrorEvent Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnErrorEvent(object sender, ErrorMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event ErrorMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnJoinEvent.html": {
    "href": "api/DiscordRPC.Events.OnJoinEvent.html",
    "title": "Delegate OnJoinEvent | Discord RPC C#",
    "summary": "Delegate OnJoinEvent Called when the Discord Client wishes for this process to join a game. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnJoinEvent(object sender, JoinMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event JoinMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnJoinRequestedEvent.html": {
    "href": "api/DiscordRPC.Events.OnJoinRequestedEvent.html",
    "title": "Delegate OnJoinRequestedEvent | Discord RPC C#",
    "summary": "Delegate OnJoinRequestedEvent Called when another discord user requests permission to join this game. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnJoinRequestedEvent(object sender, JoinRequestMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event JoinRequestMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnPresenceUpdateEvent.html": {
    "href": "api/DiscordRPC.Events.OnPresenceUpdateEvent.html",
    "title": "Delegate OnPresenceUpdateEvent | Discord RPC C#",
    "summary": "Delegate OnPresenceUpdateEvent Called when the Discord Client has updated the presence. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnPresenceUpdateEvent(object sender, PresenceMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event PresenceMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnReadyEvent.html": {
    "href": "api/DiscordRPC.Events.OnReadyEvent.html",
    "title": "Delegate OnReadyEvent | Discord RPC C#",
    "summary": "Delegate OnReadyEvent Called when the Discord Client is ready to send and receive messages. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnReadyEvent(object sender, ReadyMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event ReadyMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnRpcMessageEvent.html": {
    "href": "api/DiscordRPC.Events.OnRpcMessageEvent.html",
    "title": "Delegate OnRpcMessageEvent | Discord RPC C#",
    "summary": "Delegate OnRpcMessageEvent A RPC Message is received. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnRpcMessageEvent(object sender, IMessage msg) Parameters Type Name Description object sender The handler that sent this event IMessage msg The raw message from the RPC"
  },
  "api/DiscordRPC.Events.OnSpectateEvent.html": {
    "href": "api/DiscordRPC.Events.OnSpectateEvent.html",
    "title": "Delegate OnSpectateEvent | Discord RPC C#",
    "summary": "Delegate OnSpectateEvent Called when the Discord Client wishes for this process to spectate a game. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnSpectateEvent(object sender, SpectateMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event SpectateMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnSubscribeEvent.html": {
    "href": "api/DiscordRPC.Events.OnSubscribeEvent.html",
    "title": "Delegate OnSubscribeEvent | Discord RPC C#",
    "summary": "Delegate OnSubscribeEvent Called when the Discord Client has subscribed to an event. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnSubscribeEvent(object sender, SubscribeMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event SubscribeMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.OnUnsubscribeEvent.html": {
    "href": "api/DiscordRPC.Events.OnUnsubscribeEvent.html",
    "title": "Delegate OnUnsubscribeEvent | Discord RPC C#",
    "summary": "Delegate OnUnsubscribeEvent Called when the Discord Client has unsubscribed from an event. Namespace: DiscordRPC.Events Assembly: DiscordRPC.dll Syntax public delegate void OnUnsubscribeEvent(object sender, UnsubscribeMessage args) Parameters Type Name Description object sender The Discord client handler that sent this event UnsubscribeMessage args The arguments supplied with the event"
  },
  "api/DiscordRPC.Events.html": {
    "href": "api/DiscordRPC.Events.html",
    "title": "Namespace DiscordRPC.Events | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Events Delegates OnCloseEvent Called when connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. OnConnectionEstablishedEvent The connection to the discord client was succesfull. This is called before OnReadyEvent. OnConnectionFailedEvent Failed to establish any connection with discord. Discord is potentially not running? OnErrorEvent Called when a error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. OnJoinEvent Called when the Discord Client wishes for this process to join a game. OnJoinRequestedEvent Called when another discord user requests permission to join this game. OnPresenceUpdateEvent Called when the Discord Client has updated the presence. OnReadyEvent Called when the Discord Client is ready to send and receive messages. OnRpcMessageEvent A RPC Message is received. OnSpectateEvent Called when the Discord Client wishes for this process to spectate a game. OnSubscribeEvent Called when the Discord Client has subscribed to an event. OnUnsubscribeEvent Called when the Discord Client has unsubscribed from an event."
  },
  "api/DiscordRPC.Exceptions.BadPresenceException.html": {
    "href": "api/DiscordRPC.Exceptions.BadPresenceException.html",
    "title": "Class BadPresenceException | Discord RPC C#",
    "summary": "Class BadPresenceException A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. Inheritance object Exception BadPresenceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC.Exceptions Assembly: DiscordRPC.dll Syntax public class BadPresenceException : Exception, ISerializable Implements ISerializable"
  },
  "api/DiscordRPC.Exceptions.InvalidConfigurationException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | Discord RPC C#",
    "summary": "Class InvalidConfigurationException A InvalidConfigurationException is thrown when trying to perform a action that conflicts with the current configuration. Inheritance object Exception InvalidConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC.Exceptions Assembly: DiscordRPC.dll Syntax public class InvalidConfigurationException : Exception, ISerializable Implements ISerializable"
  },
  "api/DiscordRPC.Exceptions.InvalidPipeException.html": {
    "href": "api/DiscordRPC.Exceptions.InvalidPipeException.html",
    "title": "Class InvalidPipeException | Discord RPC C#",
    "summary": "Class InvalidPipeException The exception that is thrown when a error occurs while communicating with a pipe or when a connection attempt fails. Inheritance object Exception InvalidPipeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC.Exceptions Assembly: DiscordRPC.dll Syntax [Obsolete(\"Not actually used anywhere\")] public class InvalidPipeException : Exception, ISerializable Implements ISerializable"
  },
  "api/DiscordRPC.Exceptions.StringOutOfRangeException.html": {
    "href": "api/DiscordRPC.Exceptions.StringOutOfRangeException.html",
    "title": "Class StringOutOfRangeException | Discord RPC C#",
    "summary": "Class StringOutOfRangeException A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. Inheritance object Exception StringOutOfRangeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC.Exceptions Assembly: DiscordRPC.dll Syntax public class StringOutOfRangeException : Exception, ISerializable Properties | Edit this page View Source MaximumLength Maximum length the string is allowed to be. Declaration public int MaximumLength { get; } Property Value Type Description int | Edit this page View Source MinimumLength Minimum length the string is allowed to be. Declaration public int MinimumLength { get; } Property Value Type Description int Implements ISerializable"
  },
  "api/DiscordRPC.Exceptions.UninitializedException.html": {
    "href": "api/DiscordRPC.Exceptions.UninitializedException.html",
    "title": "Class UninitializedException | Discord RPC C#",
    "summary": "Class UninitializedException Thrown when an action is performed on a client that has not yet been initialized Inheritance object Exception UninitializedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC.Exceptions Assembly: DiscordRPC.dll Syntax public class UninitializedException : Exception, ISerializable Implements ISerializable"
  },
  "api/DiscordRPC.Exceptions.html": {
    "href": "api/DiscordRPC.Exceptions.html",
    "title": "Namespace DiscordRPC.Exceptions | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Exceptions Classes BadPresenceException A BadPresenceException is thrown when invalid, incompatible or conflicting properties and is unable to be sent. InvalidConfigurationException A InvalidConfigurationException is thrown when trying to perform a action that conflicts with the current configuration. InvalidPipeException The exception that is thrown when a error occurs while communicating with a pipe or when a connection attempt fails. StringOutOfRangeException A StringOutOfRangeException is thrown when the length of a string exceeds the allowed limit. UninitializedException Thrown when an action is performed on a client that has not yet been initialized"
  },
  "api/DiscordRPC.Helper.StringTools.html": {
    "href": "api/DiscordRPC.Helper.StringTools.html",
    "title": "Class StringTools | Discord RPC C#",
    "summary": "Class StringTools Collectin of helpful string extensions Inheritance object StringTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Helper Assembly: DiscordRPC.dll Syntax public static class StringTools Methods | Edit this page View Source GetNullOrString(string) Will return null if the string is whitespace, otherwise it will return the string. Declaration public static string GetNullOrString(this string str) Parameters Type Name Description string str The string to check Returns Type Description string Null if the string is empty, otherwise the string | Edit this page View Source ToCamelCase(string) Converts the string into UpperCamelCase (Pascal Case). Declaration public static string ToCamelCase(this string str) Parameters Type Name Description string str The string to convert Returns Type Description string | Edit this page View Source ToSnakeCase(string) Converts the string into UPPER_SNAKE_CASE Declaration public static string ToSnakeCase(this string str) Parameters Type Name Description string str The string to convert Returns Type Description string | Edit this page View Source WithinLength(string, int) Does the string fit within the given amount of bytes? Uses UTF8 encoding. Declaration public static bool WithinLength(this string str, int bytes) Parameters Type Name Description string str The string to check int bytes The maximum number of bytes the string can take up Returns Type Description bool True if the string fits within the number of bytes | Edit this page View Source WithinLength(string, int, Encoding) Does the string fit within the given amount of bytes? Declaration public static bool WithinLength(this string str, int bytes, Encoding encoding) Parameters Type Name Description string str The string to check int bytes The maximum number of bytes the string can take up Encoding encoding The encoding to count the bytes with Returns Type Description bool True if the string fits within the number of bytes"
  },
  "api/DiscordRPC.Helper.html": {
    "href": "api/DiscordRPC.Helper.html",
    "title": "Namespace DiscordRPC.Helper | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Helper Classes StringTools Collectin of helpful string extensions"
  },
  "api/DiscordRPC.IO.INamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.INamedPipeClient.html",
    "title": "Interface INamedPipeClient | Discord RPC C#",
    "summary": "Interface INamedPipeClient Pipe Client used to communicate with Discord. Inherited Members IDisposable.Dispose() Namespace: DiscordRPC.IO Assembly: DiscordRPC.dll Syntax public interface INamedPipeClient : IDisposable Properties | Edit this page View Source ConnectedPipe The pipe the client is currently connected too Declaration int ConnectedPipe { get; } Property Value Type Description int | Edit this page View Source IsConnected Is the pipe client currently connected? Declaration bool IsConnected { get; } Property Value Type Description bool | Edit this page View Source Logger The logger for the Pipe client to use Declaration ILogger Logger { get; set; } Property Value Type Description ILogger Methods | Edit this page View Source Close() Closes the connection Declaration void Close() | Edit this page View Source Connect(int) Attempts to connect to the pipe. If 0-9 is passed to pipe, it should try to only connect to the specified pipe. If -1 is passed, the pipe will find the first available pipe. Declaration bool Connect(int pipe) Parameters Type Name Description int pipe If -1 is passed, the pipe will find the first available pipe, otherwise it connects to the pipe that was supplied Returns Type Description bool | Edit this page View Source ReadFrame(out PipeFrame) Reads a frame if there is one available. Returns false if there is none. This should be non blocking (aka use a Peek first). Declaration bool ReadFrame(out PipeFrame frame) Parameters Type Name Description PipeFrame frame The frame that has been read. Will be default(PipeFrame) if it fails to read Returns Type Description bool Returns true if a frame has been read, otherwise false. | Edit this page View Source WriteFrame(PipeFrame) Writes the frame to the pipe. Returns false if any errors occur. Declaration bool WriteFrame(PipeFrame frame) Parameters Type Name Description PipeFrame frame The frame to be written Returns Type Description bool"
  },
  "api/DiscordRPC.IO.ManagedNamedPipeClient.html": {
    "href": "api/DiscordRPC.IO.ManagedNamedPipeClient.html",
    "title": "Class ManagedNamedPipeClient | Discord RPC C#",
    "summary": "Class ManagedNamedPipeClient A named pipe client using the .NET framework NamedPipeClientStream Inheritance object ManagedNamedPipeClient Implements INamedPipeClient IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.IO Assembly: DiscordRPC.dll Syntax public sealed class ManagedNamedPipeClient : INamedPipeClient, IDisposable Constructors | Edit this page View Source ManagedNamedPipeClient() Creates a new instance of a Managed NamedPipe client. Doesn't connect to anything yet, just setups the values. Declaration public ManagedNamedPipeClient() Properties | Edit this page View Source ConnectedPipe The pipe we are currently connected too. Declaration public int ConnectedPipe { get; } Property Value Type Description int | Edit this page View Source IsConnected Checks if the client is connected Declaration public bool IsConnected { get; } Property Value Type Description bool | Edit this page View Source Logger The logger for the Pipe client to use Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger Methods | Edit this page View Source Close() Closes the pipe Declaration public void Close() | Edit this page View Source Connect(int) Connects to the pipe Declaration public bool Connect(int pipe) Parameters Type Name Description int pipe Returns Type Description bool | Edit this page View Source Dispose() Disposes of the stream Declaration public void Dispose() | Edit this page View Source GetPipeName(int) returns a platform specific path that Discord is hosting the IPC on. Declaration public static string GetPipeName(int pipe) Parameters Type Name Description int pipe The pipe number Returns Type Description string | Edit this page View Source GetPipeName(int, string) Returns a platform specific path that Discord is hosting the IPC on. Declaration public static string GetPipeName(int pipe, string sandbox) Parameters Type Name Description int pipe The pipe number. string sandbox The sandbox environment the pipe is in Returns Type Description string | Edit this page View Source GetPipeSandbox() Gets the name of the possible sandbox environment the pipe might be located within. If the platform doesn't support sandboxed Discord, then it will return null. Declaration public static string GetPipeSandbox() Returns Type Description string | Edit this page View Source IsUnix() Returns true if the current OS platform is Unix based (Unix or MacOSX). Declaration public static bool IsUnix() Returns Type Description bool | Edit this page View Source ReadFrame(out PipeFrame) Reads a frame, returning false if none are available Declaration public bool ReadFrame(out PipeFrame frame) Parameters Type Name Description PipeFrame frame Returns Type Description bool | Edit this page View Source WriteFrame(PipeFrame) Writes a frame to the pipe Declaration public bool WriteFrame(PipeFrame frame) Parameters Type Name Description PipeFrame frame Returns Type Description bool Implements INamedPipeClient IDisposable"
  },
  "api/DiscordRPC.IO.Opcode.html": {
    "href": "api/DiscordRPC.IO.Opcode.html",
    "title": "Enum Opcode | Discord RPC C#",
    "summary": "Enum Opcode The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect. Namespace: DiscordRPC.IO Assembly: DiscordRPC.dll Syntax public enum Opcode : uint Fields Name Description Close Discord has closed the connection Frame Generic message frame Handshake Initial handshake frame Ping Ping frame (not used?) Pong Pong frame (not used?)"
  },
  "api/DiscordRPC.IO.PipeFrame.html": {
    "href": "api/DiscordRPC.IO.PipeFrame.html",
    "title": "Struct PipeFrame | Discord RPC C#",
    "summary": "Struct PipeFrame A frame received and sent to the Discord client for RPC communications. Implements IEquatable<PipeFrame> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: DiscordRPC.IO Assembly: DiscordRPC.dll Syntax public struct PipeFrame : IEquatable<PipeFrame> Constructors | Edit this page View Source PipeFrame(Opcode, object) Creates a new pipe frame instance Declaration public PipeFrame(Opcode opcode, object data) Parameters Type Name Description Opcode opcode The opcode of the frame object data The data of the frame that will be serialized as JSON Fields | Edit this page View Source MAX_SIZE The maxium size of a pipe frame (16kb). Declaration public static readonly int MAX_SIZE Field Value Type Description int Properties | Edit this page View Source Data The data in the frame Declaration public byte[] Data { readonly get; set; } Property Value Type Description byte[] | Edit this page View Source Length The length of the frame data Declaration public uint Length { get; } Property Value Type Description uint | Edit this page View Source Message The data represented as a string. Declaration public string Message { get; set; } Property Value Type Description string | Edit this page View Source MessageEncoding Gets the encoding used for the pipe frames Declaration public Encoding MessageEncoding { get; } Property Value Type Description Encoding | Edit this page View Source Opcode The opcode of the frame Declaration public Opcode Opcode { readonly get; set; } Property Value Type Description Opcode Methods | Edit this page View Source Equals(PipeFrame) Compares if the frame equals the other frame. Declaration public bool Equals(PipeFrame other) Parameters Type Name Description PipeFrame other Returns Type Description bool | Edit this page View Source GetObject<T>() Deserializes the data into the supplied type using JSON. Declaration public T GetObject<T>() Returns Type Description T Type Parameters Name Description T The type to deserialize into | Edit this page View Source ReadStream(Stream) Attempts to read the contents of the frame from the stream Declaration public bool ReadStream(Stream stream) Parameters Type Name Description Stream stream Returns Type Description bool | Edit this page View Source SetObject(Opcode, object) Sets the opcodes and serializes the object into a json string. Declaration public void SetObject(Opcode opcode, object obj) Parameters Type Name Description Opcode opcode object obj | Edit this page View Source SetObject(object) Serializes the object into json string then encodes it into Data. Declaration public void SetObject(object obj) Parameters Type Name Description object obj | Edit this page View Source WriteStream(Stream) Writes the frame into the target frame as one big byte block. Declaration public void WriteStream(Stream stream) Parameters Type Name Description Stream stream Implements IEquatable<T>"
  },
  "api/DiscordRPC.IO.html": {
    "href": "api/DiscordRPC.IO.html",
    "title": "Namespace DiscordRPC.IO | Discord RPC C#",
    "summary": "Namespace DiscordRPC.IO Classes ManagedNamedPipeClient A named pipe client using the .NET framework NamedPipeClientStream Structs PipeFrame A frame received and sent to the Discord client for RPC communications. Interfaces INamedPipeClient Pipe Client used to communicate with Discord. Enums Opcode The operation code that the PipeFrame was sent under. This defines the type of frame and the data to expect."
  },
  "api/DiscordRPC.Logging.ConsoleLogger.html": {
    "href": "api/DiscordRPC.Logging.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Discord RPC C#",
    "summary": "Class ConsoleLogger Logs the outputs to the console using WriteLine() Inheritance object ConsoleLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Logging Assembly: DiscordRPC.dll Syntax public class ConsoleLogger : ILogger Constructors | Edit this page View Source ConsoleLogger() Creates a new instance of a Console Logger. Declaration public ConsoleLogger() | Edit this page View Source ConsoleLogger(LogLevel) Creates a new instance of a Console Logger Declaration public ConsoleLogger(LogLevel level) Parameters Type Name Description LogLevel level The log level | Edit this page View Source ConsoleLogger(LogLevel, bool) Creates a new instance of a Console Logger with a set log level Declaration public ConsoleLogger(LogLevel level, bool coloured) Parameters Type Name Description LogLevel level The log level bool coloured Should the logs be in colour? Properties | Edit this page View Source Colored A alias too Coloured Declaration [Obsolete(\"Use Coloured\")] public bool Colored { get; set; } Property Value Type Description bool | Edit this page View Source Coloured Should the output be coloured? Declaration public bool Coloured { get; set; } Property Value Type Description bool | Edit this page View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Edit this page View Source Error(string, params object[]) Error log messsages Declaration public void Error(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Info(string, params object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Trace(string, params object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Warning(string, params object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description string message object[] args Implements ILogger"
  },
  "api/DiscordRPC.Logging.FileLogger.html": {
    "href": "api/DiscordRPC.Logging.FileLogger.html",
    "title": "Class FileLogger | Discord RPC C#",
    "summary": "Class FileLogger Logs the outputs to a file Inheritance object FileLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Logging Assembly: DiscordRPC.dll Syntax public class FileLogger : ILogger Constructors | Edit this page View Source FileLogger(string) Creates a new instance of the file logger Declaration public FileLogger(string path) Parameters Type Name Description string path The path of the log file. | Edit this page View Source FileLogger(string, LogLevel) Creates a new instance of the file logger Declaration public FileLogger(string path, LogLevel level) Parameters Type Name Description string path The path of the log file. LogLevel level The level to assign to the logger. Properties | Edit this page View Source File Should the output be coloured? Declaration public string File { get; set; } Property Value Type Description string | Edit this page View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Edit this page View Source Error(string, params object[]) Error log messsages Declaration public void Error(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Info(string, params object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Trace(string, params object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Warning(string, params object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description string message object[] args Implements ILogger"
  },
  "api/DiscordRPC.Logging.ILogger.html": {
    "href": "api/DiscordRPC.Logging.ILogger.html",
    "title": "Interface ILogger | Discord RPC C#",
    "summary": "Interface ILogger Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. Namespace: DiscordRPC.Logging Assembly: DiscordRPC.dll Syntax public interface ILogger Properties | Edit this page View Source Level The level of logging to apply to this logger. Declaration LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Edit this page View Source Error(string, params object[]) Error log messsages Declaration void Error(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Info(string, params object[]) Informative log messages Declaration void Info(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Trace(string, params object[]) Debug trace messeages used for debugging internal elements. Declaration void Trace(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Warning(string, params object[]) Warning log messages Declaration void Warning(string message, params object[] args) Parameters Type Name Description string message object[] args"
  },
  "api/DiscordRPC.Logging.LogLevel.html": {
    "href": "api/DiscordRPC.Logging.LogLevel.html",
    "title": "Enum LogLevel | Discord RPC C#",
    "summary": "Enum LogLevel Level of logging to use. Namespace: DiscordRPC.Logging Assembly: DiscordRPC.dll Syntax public enum LogLevel Fields Name Description Error Only Errors are logged Info Info, Warning and Errors are logged None Nothing is logged Trace Trace, Info, Warning and Errors are logged Warning Warning and Errors are logged"
  },
  "api/DiscordRPC.Logging.NullLogger.html": {
    "href": "api/DiscordRPC.Logging.NullLogger.html",
    "title": "Class NullLogger | Discord RPC C#",
    "summary": "Class NullLogger Ignores all log events Inheritance object NullLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Logging Assembly: DiscordRPC.dll Syntax public class NullLogger : ILogger Properties | Edit this page View Source Level The level of logging to apply to this logger. Declaration public LogLevel Level { get; set; } Property Value Type Description LogLevel Methods | Edit this page View Source Error(string, params object[]) Error log messsages Declaration public void Error(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Info(string, params object[]) Informative log messages Declaration public void Info(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Trace(string, params object[]) Informative log messages Declaration public void Trace(string message, params object[] args) Parameters Type Name Description string message object[] args | Edit this page View Source Warning(string, params object[]) Warning log messages Declaration public void Warning(string message, params object[] args) Parameters Type Name Description string message object[] args Implements ILogger"
  },
  "api/DiscordRPC.Logging.html": {
    "href": "api/DiscordRPC.Logging.html",
    "title": "Namespace DiscordRPC.Logging | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Logging Classes ConsoleLogger Logs the outputs to the console using WriteLine() FileLogger Logs the outputs to a file NullLogger Ignores all log events Interfaces ILogger Logging interface to log the internal states of the pipe. Logs are sent in a NON thread safe way. They can come from multiple threads and it is upto the ILogger to account for it. Enums LogLevel Level of logging to use."
  },
  "api/DiscordRPC.Message.CloseMessage.html": {
    "href": "api/DiscordRPC.Message.CloseMessage.html",
    "title": "Class CloseMessage | Discord RPC C#",
    "summary": "Class CloseMessage Called when the IPC has closed. Inheritance object IMessage CloseMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class CloseMessage : IMessage Properties | Edit this page View Source Code The closure code Declaration public int Code { get; } Property Value Type Description int | Edit this page View Source Reason The reason for the close Declaration public string Reason { get; } Property Value Type Description string | Edit this page View Source Type The type of message Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.ConnectionEstablishedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionEstablishedMessage.html",
    "title": "Class ConnectionEstablishedMessage | Discord RPC C#",
    "summary": "Class ConnectionEstablishedMessage The connection to the discord client was succesfull. This is called before Ready. Inheritance object IMessage ConnectionEstablishedMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class ConnectionEstablishedMessage : IMessage Properties | Edit this page View Source ConnectedPipe The pipe we ended up connecting too Declaration public int ConnectedPipe { get; } Property Value Type Description int | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.ConnectionFailedMessage.html": {
    "href": "api/DiscordRPC.Message.ConnectionFailedMessage.html",
    "title": "Class ConnectionFailedMessage | Discord RPC C#",
    "summary": "Class ConnectionFailedMessage Failed to establish any connection with discord. Discord is potentially not running? Inheritance object IMessage ConnectionFailedMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class ConnectionFailedMessage : IMessage Properties | Edit this page View Source FailedPipe The pipe we failed to connect too. Declaration public int FailedPipe { get; } Property Value Type Description int | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.ErrorCode.html": {
    "href": "api/DiscordRPC.Message.ErrorCode.html",
    "title": "Enum ErrorCode | Discord RPC C#",
    "summary": "Enum ErrorCode The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public enum ErrorCode Fields Name Description InvalidCommand Invalid command was sent InvalidEvent Invalid event was sent InvalidPayload Invalid Payload received NotImplemented The functionality was not yet implemented PipeException The pipe had an exception ReadCorrupt The pipe received corrupted data Success Pipe was Successful UnknownError Unknown Discord error"
  },
  "api/DiscordRPC.Message.ErrorMessage.html": {
    "href": "api/DiscordRPC.Message.ErrorMessage.html",
    "title": "Class ErrorMessage | Discord RPC C#",
    "summary": "Class ErrorMessage Created when a error occurs within the ipc and it is sent to the client. Inheritance object IMessage ErrorMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class ErrorMessage : IMessage Properties | Edit this page View Source Code The Discord error code. Declaration [JsonProperty(\"code\")] public ErrorCode Code { get; } Property Value Type Description ErrorCode | Edit this page View Source Message The message associated with the error code. Declaration [JsonProperty(\"message\")] public string Message { get; } Property Value Type Description string | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.IMessage.html": {
    "href": "api/DiscordRPC.Message.IMessage.html",
    "title": "Class IMessage | Discord RPC C#",
    "summary": "Class IMessage Messages received from discord. Inheritance object IMessage CloseMessage ConnectionEstablishedMessage ConnectionFailedMessage ErrorMessage JoinMessage JoinRequestMessage PresenceMessage ReadyMessage SubscribeMessage UnsubscribeMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public abstract class IMessage Constructors | Edit this page View Source IMessage() Creates a new instance of the message Declaration public IMessage() Properties | Edit this page View Source TimeCreated The time the message was created Declaration public DateTime TimeCreated { get; } Property Value Type Description DateTime | Edit this page View Source Type The type of message received from discord Declaration public abstract MessageType Type { get; } Property Value Type Description MessageType"
  },
  "api/DiscordRPC.Message.JoinMessage.html": {
    "href": "api/DiscordRPC.Message.JoinMessage.html",
    "title": "Class JoinMessage | Discord RPC C#",
    "summary": "Class JoinMessage Called when the Discord Client wishes for this process to join a game. D -> C. Inheritance object IMessage JoinMessage SpectateMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class JoinMessage : IMessage Properties | Edit this page View Source Secret The JoinSecret to connect with. Declaration [JsonProperty(\"secret\")] public string Secret { get; } Property Value Type Description string | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.JoinRequestMessage.html": {
    "href": "api/DiscordRPC.Message.JoinRequestMessage.html",
    "title": "Class JoinRequestMessage | Discord RPC C#",
    "summary": "Class JoinRequestMessage Called when some other person has requested access to this game. C -> D -> C. Inheritance object IMessage JoinRequestMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class JoinRequestMessage : IMessage Properties | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type | Edit this page View Source User The discord user that is requesting access. Declaration [JsonProperty(\"user\")] public User User { get; } Property Value Type Description User"
  },
  "api/DiscordRPC.Message.MessageType.html": {
    "href": "api/DiscordRPC.Message.MessageType.html",
    "title": "Enum MessageType | Discord RPC C#",
    "summary": "Enum MessageType Type of message. Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public enum MessageType Fields Name Description Close The connection to the Discord Client is lost. The connection will remain close and unready to accept messages until the Ready event is called again. ConnectionEstablished The connection to the discord client was succesfull. This is called before Ready. ConnectionFailed Failed to establish any connection with discord. Discord is potentially not running? Error A error has occured during the transmission of a message. For example, if a bad Rich Presence payload is sent, this event will be called explaining what went wrong. Join The Discord Client wishes for this process to join a game. JoinRequest Another discord user requests permission to join this game. PresenceUpdate The Discord Client has updated the presence. Ready The Discord Client is ready to send and receive messages. Spectate The Discord Client wishes for this process to spectate a game. Subscribe The Discord Client has subscribed to an event. Unsubscribe The Discord Client has unsubscribed from an event."
  },
  "api/DiscordRPC.Message.PresenceMessage.html": {
    "href": "api/DiscordRPC.Message.PresenceMessage.html",
    "title": "Class PresenceMessage | Discord RPC C#",
    "summary": "Class PresenceMessage Representation of the message received by discord when the presence has been updated. Inheritance object IMessage PresenceMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class PresenceMessage : IMessage Properties | Edit this page View Source ApplicationID The ID of the application discord has set it for Declaration public string ApplicationID { get; } Property Value Type Description string | Edit this page View Source Name The name of the application Discord has set it for Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Presence The rich presence Discord has set Declaration public BaseRichPresence Presence { get; } Property Value Type Description BaseRichPresence | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.ReadyMessage.html": {
    "href": "api/DiscordRPC.Message.ReadyMessage.html",
    "title": "Class ReadyMessage | Discord RPC C#",
    "summary": "Class ReadyMessage Called when the ipc is ready to send arguments. Inheritance object IMessage ReadyMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class ReadyMessage : IMessage Properties | Edit this page View Source Configuration The configuration of the connection Declaration [JsonProperty(\"config\")] public Configuration Configuration { get; set; } Property Value Type Description Configuration | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type | Edit this page View Source User User the connection belongs too Declaration [JsonProperty(\"user\")] public User User { get; set; } Property Value Type Description User | Edit this page View Source Version The version of the RPC Declaration [JsonProperty(\"v\")] public int Version { get; set; } Property Value Type Description int"
  },
  "api/DiscordRPC.Message.SpectateMessage.html": {
    "href": "api/DiscordRPC.Message.SpectateMessage.html",
    "title": "Class SpectateMessage | Discord RPC C#",
    "summary": "Class SpectateMessage Called when the Discord Client wishes for this process to spectate a game. D -> C. Inheritance object IMessage JoinMessage SpectateMessage Inherited Members JoinMessage.Secret IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class SpectateMessage : JoinMessage Properties | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides JoinMessage.Type"
  },
  "api/DiscordRPC.Message.SubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.SubscribeMessage.html",
    "title": "Class SubscribeMessage | Discord RPC C#",
    "summary": "Class SubscribeMessage Called as validation of a subscribe Inheritance object IMessage SubscribeMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class SubscribeMessage : IMessage Properties | Edit this page View Source Event The event that was subscribed too. Declaration public EventType Event { get; } Property Value Type Description EventType | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.UnsubscribeMessage.html": {
    "href": "api/DiscordRPC.Message.UnsubscribeMessage.html",
    "title": "Class UnsubscribeMessage | Discord RPC C#",
    "summary": "Class UnsubscribeMessage Called as validation of a subscribe Inheritance object IMessage UnsubscribeMessage Inherited Members IMessage.TimeCreated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC.Message Assembly: DiscordRPC.dll Syntax public class UnsubscribeMessage : IMessage Properties | Edit this page View Source Event The event that was subscribed too. Declaration public EventType Event { get; } Property Value Type Description EventType | Edit this page View Source Type The type of message received from discord Declaration public override MessageType Type { get; } Property Value Type Description MessageType Overrides IMessage.Type"
  },
  "api/DiscordRPC.Message.html": {
    "href": "api/DiscordRPC.Message.html",
    "title": "Namespace DiscordRPC.Message | Discord RPC C#",
    "summary": "Namespace DiscordRPC.Message Classes CloseMessage Called when the IPC has closed. ConnectionEstablishedMessage The connection to the discord client was succesfull. This is called before Ready. ConnectionFailedMessage Failed to establish any connection with discord. Discord is potentially not running? ErrorMessage Created when a error occurs within the ipc and it is sent to the client. IMessage Messages received from discord. JoinMessage Called when the Discord Client wishes for this process to join a game. D -> C. JoinRequestMessage Called when some other person has requested access to this game. C -> D -> C. PresenceMessage Representation of the message received by discord when the presence has been updated. ReadyMessage Called when the ipc is ready to send arguments. SpectateMessage Called when the Discord Client wishes for this process to spectate a game. D -> C. SubscribeMessage Called as validation of a subscribe UnsubscribeMessage Called as validation of a subscribe Enums ErrorCode The error message received by discord. See https://discordapp.com/developers/docs/topics/rpc#rpc-server-payloads-rpc-errors for documentation MessageType Type of message."
  },
  "api/DiscordRPC.Party.PrivacySetting.html": {
    "href": "api/DiscordRPC.Party.PrivacySetting.html",
    "title": "Enum Party.PrivacySetting | Discord RPC C#",
    "summary": "Enum Party.PrivacySetting Privacy of the party Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum Party.PrivacySetting Fields Name Description Private The party is private, invites only. Public The party is public, anyone can join."
  },
  "api/DiscordRPC.Party.html": {
    "href": "api/DiscordRPC.Party.html",
    "title": "Class Party | Discord RPC C#",
    "summary": "Class Party Structure representing the part the player is in. Inheritance object Party Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Serializable] public class Party Properties | Edit this page View Source ID A unique ID for the player's current party / lobby / group. If this is not supplied, they player will not be in a party and the rest of the information will not be sent. Max 128 Bytes Declaration [JsonProperty(\"id\", NullValueHandling = NullValueHandling.Ignore)] public string ID { get; set; } Property Value Type Description string | Edit this page View Source Max The maxium size of the party / lobby / group. This is required to be larger than Size. If it is smaller than the current party size, it will automatically be set too Size when the presence is sent. Declaration [JsonIgnore] public int Max { get; set; } Property Value Type Description int | Edit this page View Source Privacy The privacy of the party Declaration [JsonProperty(\"privacy\", NullValueHandling = NullValueHandling.Include, DefaultValueHandling = DefaultValueHandling.Include)] public Party.PrivacySetting Privacy { get; set; } Property Value Type Description Party.PrivacySetting | Edit this page View Source Size The current size of the players party / lobby / group. Declaration [JsonIgnore] public int Size { get; set; } Property Value Type Description int"
  },
  "api/DiscordRPC.RichPresence.html": {
    "href": "api/DiscordRPC.RichPresence.html",
    "title": "Class RichPresence | Discord RPC C#",
    "summary": "Class RichPresence The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. Inheritance object BaseRichPresence RichPresence Inherited Members BaseRichPresence.State BaseRichPresence.Details BaseRichPresence.Timestamps BaseRichPresence.Assets BaseRichPresence.Party BaseRichPresence.Secrets BaseRichPresence.Type BaseRichPresence.StatusDisplay BaseRichPresence.HasTimestamps() BaseRichPresence.HasAssets() BaseRichPresence.HasParty() BaseRichPresence.HasSecrets() BaseRichPresence.ToRichPresence() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public sealed class RichPresence : BaseRichPresence Properties | Edit this page View Source Buttons The buttons to display in the presence. Max of 2 Declaration [JsonProperty(\"buttons\", NullValueHandling = NullValueHandling.Ignore)] public Button[] Buttons { get; set; } Property Value Type Description Button[] Methods | Edit this page View Source Clone() Clones the presence into a new instance. Used for thread safe writing and reading. This function will ignore properties if they are in a invalid state. Declaration public RichPresence Clone() Returns Type Description RichPresence | Edit this page View Source HasButtons() Does the Rich Presence have any buttons? Declaration public bool HasButtons() Returns Type Description bool | Edit this page View Source WithAssets(Assets) Sets the assets of the Rich Presence. See also Assets. Declaration public RichPresence WithAssets(Assets assets) Parameters Type Name Description Assets assets The names of the images to use and the tooltips to give those images. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithDetails(string) Sets the details of the Rich Presence. See also Details. Declaration public RichPresence WithDetails(string details) Parameters Type Name Description string details What the user is currently doing. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithParty(Party) Sets the Rich Presence's party. See also Party. Declaration public RichPresence WithParty(Party party) Parameters Type Name Description Party party The party the player is currently in. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithSecrets(Secrets) Sets the Rich Presence's secrets. See also Secrets. Declaration public RichPresence WithSecrets(Secrets secrets) Parameters Type Name Description Secrets secrets The secrets used for Join / Spectate. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithState(string) Sets the state of the Rich Presence. See also State. Declaration public RichPresence WithState(string state) Parameters Type Name Description string state The user's current Party status. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithStatusDisplay(StatusDisplayType) Sets the display type for the status. See also StatusDisplayType. Declaration public RichPresence WithStatusDisplay(StatusDisplayType statusDisplay) Parameters Type Name Description StatusDisplayType statusDisplay Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithTimestamps(Timestamps) Sets the timestamp of the Rich Presence. See also Timestamps. Declaration public RichPresence WithTimestamps(Timestamps timestamps) Parameters Type Name Description Timestamps timestamps The time elapsed / remaining time data. Returns Type Description RichPresence The modified Rich Presence. | Edit this page View Source WithType(ActivityType) Sets the type of the Rich Presence. See also ActivityType. Declaration public RichPresence WithType(ActivityType type) Parameters Type Name Description ActivityType type The status type Returns Type Description RichPresence The modified Rich Presence. Operators | Edit this page View Source implicit operator bool(RichPresence) Operator that converts a presence into a boolean for null checks. Declaration public static implicit operator bool(RichPresence presesnce) Parameters Type Name Description RichPresence presesnce Returns Type Description bool"
  },
  "api/DiscordRPC.Secrets.html": {
    "href": "api/DiscordRPC.Secrets.html",
    "title": "Class Secrets | Discord RPC C#",
    "summary": "Class Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. Inheritance object Secrets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Serializable] public class Secrets Properties | Edit this page View Source Encoding The encoding the secret generator is using Declaration public static Encoding Encoding { get; } Property Value Type Description Encoding | Edit this page View Source JoinSecret The secret data that will tell the client how to connect to the game to play. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 characters Declaration [JsonProperty(\"join\", NullValueHandling = NullValueHandling.Ignore)] public string JoinSecret { get; set; } Property Value Type Description string | Edit this page View Source MatchSecret The unique match code to distinguish different games/lobbies. Use CreateSecret(Random) to get an appropriately sized secret. This cannot be null and must be supplied for the Join / Spectate feature to work. Max Length of 128 characters Declaration [Obsolete(\"This feature has been deprecated my Mason in issue #152 on the offical library. Was originally used as a Notify Me feature, it has been replaced with Join / Spectate.\")] [JsonProperty(\"match\", NullValueHandling = NullValueHandling.Ignore)] public string MatchSecret { get; set; } Property Value Type Description string | Edit this page View Source SecretLength The length of a secret in bytes. Declaration public static int SecretLength { get; } Property Value Type Description int | Edit this page View Source SpectateSecret The secret data that will tell the client how to connect to the game to spectate. This could be a unique identifier for a fancy match maker or player id, lobby id, etc. It is recommended to encrypt this information so its hard for people to replicate it. Do NOT just use the IP address in this. That is a bad practice and can leave your players vulnerable! Max Length of 128 characters Declaration [JsonProperty(\"spectate\", NullValueHandling = NullValueHandling.Ignore)] public string SpectateSecret { get; set; } Property Value Type Description string Methods | Edit this page View Source CreateFriendlySecret(Random) Creates a secret word using more readable friendly characters. Useful for debugging purposes. This is not a cryptographic function and should NOT be used for sensitive information. Declaration public static string CreateFriendlySecret(Random random) Parameters Type Name Description Random random The random used to generate the characters Returns Type Description string | Edit this page View Source CreateSecret(Random) Creates a new secret. This is NOT a cryptographic function and should NOT be used for sensitive information. This is mainly provided as a way to generate quick IDs. Declaration public static string CreateSecret(Random random) Parameters Type Name Description Random random The random to use Returns Type Description string Returns a SecretLength sized string with random characters from Encoding"
  },
  "api/DiscordRPC.StatusDisplayType.html": {
    "href": "api/DiscordRPC.StatusDisplayType.html",
    "title": "Enum StatusDisplayType | Discord RPC C#",
    "summary": "Enum StatusDisplayType Rich Presence Display type Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum StatusDisplayType Fields Name Description Details Displays the rich presence details \"Listening to Never Gonna Give You Up\" Name Displays the rich presence name \"Listening to Spotify\" State Displays the rich presence state \"Listening to Rick Astley\""
  },
  "api/DiscordRPC.Timestamps.html": {
    "href": "api/DiscordRPC.Timestamps.html",
    "title": "Class Timestamps | Discord RPC C#",
    "summary": "Class Timestamps Structure representing the start and endtimes of a match. Inheritance object Timestamps Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Serializable] public class Timestamps Constructors | Edit this page View Source Timestamps() Creates a empty timestamp object Declaration public Timestamps() | Edit this page View Source Timestamps(DateTime) Creates a timestamp with the set start time Declaration public Timestamps(DateTime start) Parameters Type Name Description DateTime start | Edit this page View Source Timestamps(DateTime, DateTime) Creates a timestamp with a set duration Declaration public Timestamps(DateTime start, DateTime end) Parameters Type Name Description DateTime start The start time DateTime end The end time Properties | Edit this page View Source End The time the match will end. When included (not-null), the time in the rich presence will be shown as \"00:01 remaining\". This will override the \"elapsed\" to \"remaining\". Declaration [JsonIgnore] public DateTime? End { get; set; } Property Value Type Description DateTime? | Edit this page View Source EndUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the End. End Declaration [JsonProperty(\"end\", NullValueHandling = NullValueHandling.Ignore)] public ulong? EndUnixMilliseconds { get; set; } Property Value Type Description ulong? | Edit this page View Source Now A new timestamp that starts from the current time. Declaration public static Timestamps Now { get; } Property Value Type Description Timestamps | Edit this page View Source Start The time that match started. When included (not-null), the time in the rich presence will be shown as \"00:01 elapsed\". Declaration [JsonIgnore] public DateTime? Start { get; set; } Property Value Type Description DateTime? | Edit this page View Source StartUnixMilliseconds Converts between DateTime and Milliseconds to give the Unix Epoch Time for the Start. Declaration [JsonProperty(\"start\", NullValueHandling = NullValueHandling.Ignore)] public ulong? StartUnixMilliseconds { get; set; } Property Value Type Description ulong? Methods | Edit this page View Source FromTimeSpan(double) Creates a new timestamp starting at the current time and ending in the supplied timespan Declaration public static Timestamps FromTimeSpan(double seconds) Parameters Type Name Description double seconds How long the Timestamp will last for in seconds. Returns Type Description Timestamps Returns a new timestamp with given duration. | Edit this page View Source FromTimeSpan(TimeSpan) Creates a new timestamp starting at current time and ending in the supplied timespan Declaration public static Timestamps FromTimeSpan(TimeSpan timespan) Parameters Type Name Description TimeSpan timespan How long the Timestamp will last for. Returns Type Description Timestamps Returns a new timestamp with given duration. | Edit this page View Source FromUnixMilliseconds(ulong) Converts a Unix Epoch time into a DateTime. Declaration public static DateTime FromUnixMilliseconds(ulong unixTime) Parameters Type Name Description ulong unixTime The time in milliseconds since 1970 / 01 / 01 Returns Type Description DateTime | Edit this page View Source ToUnixMilliseconds(DateTime) Converts a DateTime into a Unix Epoch time (in milliseconds). Declaration public static ulong ToUnixMilliseconds(DateTime date) Parameters Type Name Description DateTime date The datetime to convert Returns Type Description ulong"
  },
  "api/DiscordRPC.User.AvatarFormat.html": {
    "href": "api/DiscordRPC.User.AvatarFormat.html",
    "title": "Enum User.AvatarFormat | Discord RPC C#",
    "summary": "Enum User.AvatarFormat Possible formats for avatars Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum User.AvatarFormat Fields Name Description GIF Graphics Interchange Format (.gif) Animated avatars that Discord Nitro users are able to use. If the user doesn't have an animated avatar, then it will just be a single frame gif. JPEG Joint Photographic Experts Group format (.jpeg) The format most cameras use. Lossy and does not support transparent avatars. PNG Portable Network Graphics format (.png) Losses format that supports transparent avatars. Most recommended for stationary formats with wide support from many libraries. WebP WebP format (.webp) Picture only version of WebM. Pronounced \"weeb p\"."
  },
  "api/DiscordRPC.User.AvatarSize.html": {
    "href": "api/DiscordRPC.User.AvatarSize.html",
    "title": "Enum User.AvatarSize | Discord RPC C#",
    "summary": "Enum User.AvatarSize Possible square sizes of avatars. Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum User.AvatarSize Fields Name Description x1024 1024 x 1024 pixels. x128 128 x 128 pixels. x16 16 x 16 pixels. x2048 2048 x 2048 pixels. x256 256 x 256 pixels. x32 32 x 32 pixels. x512 512 x 512 pixels. x64 64 x 64 pixels."
  },
  "api/DiscordRPC.User.Flag.html": {
    "href": "api/DiscordRPC.User.Flag.html",
    "title": "Enum User.Flag | Discord RPC C#",
    "summary": "Enum User.Flag A flag on the user account Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax [Flags] public enum User.Flag Fields Name Description BugHunter Bug Hunters that found and reported bugs in Discord. EarlySupporter Early Supporter of Discord and had Nitro before the store was released. Employee Staff of Discord. HouseBalance The HypeSquad House of Balance (the best one). HouseBravery The HypeSquad House of Bravery. HouseBrilliance The HypeSquad House of Brilliance. HypeSquad Original HypeSquad which organise events. None No flag Partner Partners of Discord. TeamUser Apart of a team. Unclear if it is reserved for members that share a team with the current application."
  },
  "api/DiscordRPC.User.PremiumType.html": {
    "href": "api/DiscordRPC.User.PremiumType.html",
    "title": "Enum User.PremiumType | Discord RPC C#",
    "summary": "Enum User.PremiumType Type of premium Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public enum User.PremiumType Fields Name Description Nitro Nitro subscription. Has chat perks, animated avatars, server boosting, and access to free Nitro Games. NitroClassic Nitro Classic subscription. Has chat perks and animated avatars. None No subscription to any forms of Nitro."
  },
  "api/DiscordRPC.User.html": {
    "href": "api/DiscordRPC.User.html",
    "title": "Class User | Discord RPC C#",
    "summary": "Class User Object representing a Discord user. This is used for join requests. Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: DiscordRPC Assembly: DiscordRPC.dll Syntax public class User Properties | Edit this page View Source Avatar The avatar hash of the user. Too get a URL for the avatar, use the GetAvatarURL(AvatarFormat, AvatarSize). This can be null if the user has no avatar. The GetAvatarURL(AvatarFormat, AvatarSize) will account for this and return the discord default. Declaration [JsonProperty(\"avatar\")] public string Avatar { get; } Property Value Type Description string | Edit this page View Source CdnEndpoint The endpoint for the CDN. Normally cdn.discordapp.com. Declaration public string CdnEndpoint { get; } Property Value Type Description string | Edit this page View Source Discriminator The discriminator of the user. Declaration [JsonProperty(\"discriminator\")] [Obsolete(\"Discord no longer uses discriminators.\")] public int Discriminator { get; } Property Value Type Description int Remarks If the user has migrated to unique a Username, the discriminator will always be 0. | Edit this page View Source DisplayName The display name of the user Declaration [JsonProperty(\"global_name\")] public string DisplayName { get; } Property Value Type Description string Remarks This will be empty if the user has not set a global display name. | Edit this page View Source Flags The flags on a users account, often represented as a badge. Declaration [JsonProperty(\"flags\", NullValueHandling = NullValueHandling.Ignore)] public User.Flag Flags { get; } Property Value Type Description User.Flag | Edit this page View Source ID The snowflake ID of the user. Declaration [JsonProperty(\"id\")] public ulong ID { get; } Property Value Type Description ulong | Edit this page View Source Premium The premium type of the user. Declaration [JsonProperty(\"premium_type\", NullValueHandling = NullValueHandling.Ignore)] public User.PremiumType Premium { get; } Property Value Type Description User.PremiumType | Edit this page View Source Username The username of the player. Declaration [JsonProperty(\"username\")] public string Username { get; } Property Value Type Description string Methods | Edit this page View Source GetAvatarExtension(AvatarFormat) Returns the file extension of the specified format. Declaration public string GetAvatarExtension(User.AvatarFormat format) Parameters Type Name Description User.AvatarFormat format The format to get the extention off Returns Type Description string Returns a period prefixed file extension. | Edit this page View Source GetAvatarURL(AvatarFormat) Gets a URL that can be used to download the user's avatar. If the user has not yet set their avatar, it will return the default one that discord is using. The default avatar only supports the PNG format. Declaration public string GetAvatarURL(User.AvatarFormat format) Parameters Type Name Description User.AvatarFormat format The format of the target avatar Returns Type Description string URL to the discord CDN for the particular avatar Remarks The file returned will be 128px x 128px | Edit this page View Source GetAvatarURL(AvatarFormat, AvatarSize) Gets a URL that can be used to download the user's avatar. If the user has not yet set their avatar, it will return the default one that discord is using. The default avatar only supports the PNG format. Declaration public string GetAvatarURL(User.AvatarFormat format, User.AvatarSize size) Parameters Type Name Description User.AvatarFormat format The format of the target avatar User.AvatarSize size The optional size of the avatar you wish for. Returns Type Description string URL to the discord CDN for the particular avatar | Edit this page View Source ToString() Formats the user into a displayable format. If the user has a DisplayName, then this will be used. If the user still has a discriminator, then this will return the form of `Username#Discriminator`. Declaration public override string ToString() Returns Type Description string String of the user that can be used for display. Overrides object.ToString()"
  },
  "api/DiscordRPC.html": {
    "href": "api/DiscordRPC.html",
    "title": "Namespace DiscordRPC | Discord RPC C#",
    "summary": "Namespace DiscordRPC Classes Assets Information about the pictures used in the Rich Presence. BaseRichPresence The base rich presence structure Button A Rich Presence button. Configuration Configuration of the current RPC connection DiscordRpcClient A Discord RPC Client which is used to send Rich Presence updates and receive Join / Spectate events. Party Structure representing the part the player is in. RichPresence The Rich Presence structure that will be sent and received by Discord. Use this class to build your presence and update it appropriately. Secrets The secrets used for Join / Spectate. Secrets are obfuscated data of your choosing. They could be match ids, player ids, lobby ids, etc. To keep security on the up and up, Discord requires that you properly hash/encode/encrypt/put-a-padlock-on-and-swallow-the-key-but-wait-then-how-would-you-open-it your secrets. You should send discord data that someone else's game client would need to join or spectate their friend. If you can't or don't want to support those actions, you don't need to send secrets. Visit the Rich Presence How-To for more information. Timestamps Structure representing the start and endtimes of a match. User Object representing a Discord user. This is used for join requests. Enums ActivityType Rich Presence activity type EventType The type of event receieved by the RPC. A flag type that can be combined. Party.PrivacySetting Privacy of the party StatusDisplayType Rich Presence Display type User.AvatarFormat Possible formats for avatars User.AvatarSize Possible square sizes of avatars. User.Flag A flag on the user account User.PremiumType Type of premium"
  },
  "articles/getting_started/monogame.html": {
    "href": "articles/getting_started/monogame.html",
    "title": "Mono Game Setup | Discord RPC C#",
    "summary": "Mono Game Setup Currently no guide for Mono Game setup. Please follow the Standard Guide and include the follow files from the Unity Package: The Unity Named Pipes Library The Lachee/Discord-RPC-Unity Named Pipe Help Wanted Here Looking for those who have experience with Mono Game and implementing this library into their projects. If you have managed to successfully use this library in your project, please contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/getting_started/standard.html": {
    "href": "articles/getting_started/standard.html",
    "title": "Standard | Discord RPC C#",
    "summary": "Standard The standard guide for all .NET projects. Download First the library must be downloaded. For standard projects within the .NET enviorment, a nuget package is available and is updated to the latest release. PM> Install-Package DiscordRichPresence A build of the library itself can be located in the AppVeyor Artifacts Usage The library has 3 phases that must be followed, Initialization Rich Presence Setting Deinitialization and Disposal You can set the Rich Presence of your app at any time while the client object has been constructed. The client will store the state of the presence and automatically resend it once initialized again. Initialization The creation of the client should happen once in the lifetime of the app. Where you put the constructor is upto your application design principles, but in general its always a good idea to put it in your initializers. The client should be ideally treated like a singleton and only ever created once. Multiple instances of the client can conflict with each other and cause unpredictable results within Discord and the end users Rich Presence. public DiscordRpcClient Client { get; private set;} void Setup() { Client = new DiscordRpcClient(\"my_client_id\"); //Creates the client Client.Initialize(); //Connects the client } Note that the Initialize() can be called later and the current presence state will be re-sent to the Discord Client. Setting Rich Presence Setting Rich Presence is easy once the client has been initialized: //Set Presence client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); You may call this as regularly as you wish, the default behaviour of the application will ignore duplicate presence and Discord itself will handle ratelimiting. With that said, its always a good idea to only set the presence when there is actual change, to avoid any overheads. Disposal It is important that the client is properly disposed when finished. This will safely disconnect from Discord and dispose of the resources correctly. If you have any issues with ghosting (particularly in Unity3D), make sure you dispose the client. //Dispose client void Cleanup() { client.Dispose(); } Events By defaults, events will be executed as they occur. This means they are executed on the RPC Thread, and not on the main. For most applications, this works fine and is treated as a normal event from any other library you may use. However, for applications where thread-safety is paramount (such as Game Engines), you may need to disable this feature and manually invoke events on your calling thread like so: void Start() { //Creates a new client, telling it not to automatically invoke the events on RPC thread. Client = new DiscordRpcClient(\"my_client_id\", autoEvents: false); Client.Initialize(); } void Update() { //Invoke the events once per-frame. The events will be executed on calling thread. Client.Invoke(); } Please note that this method is only required where cross-thread talk is a big no-no. Implementing this as a Timer would just defeat the purpose as they are threaded anyways. Further Reading If you wish to implement the Join and Spectate feature within your project (those buttons), please read Joining & Spectating Introduction to get started."
  },
  "articles/getting_started/unity3d.html": {
    "href": "articles/getting_started/unity3d.html",
    "title": "Unity3D | Discord RPC C#",
    "summary": "Unity3D Please visit the documentation for Lachee/Discord-RPC-Unity"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting started with DiscordRPC C# | Discord RPC C#",
    "summary": "Getting started with DiscordRPC C# Getting started with DiscordRPC-C# is easy! With automatic nuget packages and a fully fledge Unity3D package, you can get started in no time. Dependencies Newtonsoft.JSON .NET 3.5+ or Unity3D 5.5+ Select Project Type Standard .NET Project - Recommended. For most users that are making a .NET Application Lachee/Discord-RPC-Unity - For Unity3D users that want to add Rich Presence to their game. MonoGame Project / Modding / Godot - For developers using custom MonoGame engines or modding existing games. Need More Help? Still stuck? Make a new GitHub issue!"
  },
  "articles/join_spectate/intro.html": {
    "href": "articles/join_spectate/intro.html",
    "title": "Join / Spectate | Discord RPC C#",
    "summary": "Join / Spectate Discord Rich Presence can serve as a form of match maker for your game. You can display a \"Join\" and \"Spectate\" button on your Rich Presence to allow people to connect directly through discord. Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join.html": {
    "href": "articles/join_spectate/join.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/join_requests.html": {
    "href": "articles/join_spectate/join_requests.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/join_spectate/spectate.html": {
    "href": "articles/join_spectate/spectate.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/guidelines.html": {
    "href": "articles/rich_presence/guidelines.html",
    "title": "ToDo | Discord RPC C#",
    "summary": "ToDo Documentation is current not written for this subject Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "articles/rich_presence/intro.html": {
    "href": "articles/rich_presence/intro.html",
    "title": "Rich Presence | Discord RPC C#",
    "summary": "Rich Presence Rich Presence needs to be initially setup on your Discord Developer Portal and it's recommended to follow the Best Practices. Help Wanted Here Contribute with what you know and how you did it with a new PR on the GitHub Repository"
  },
  "index.html": {
    "href": "index.html",
    "title": "Discord Rich Presence | Discord RPC C#",
    "summary": "Discord Rich Presence This is a C# implementation of the Discord RPC library which was originally written in C++. This avoids having to use the official C++ and instead provides a managed way of using the Rich Presence within the .NET environment*. While the official C++ library has been deprecated, this library has continued support and development for all your Rich Presence need, without requiring the Game SDK. Here are some key features of this library: Message Queuing Threaded Reads Managed Pipes* Error Handling & Error Checking with automatic reconnects Events from Discord (such as presence update and join requests) Full Rich Presence Implementation (including Join / Spectate) Inline Documented (for all your IntelliSense needs) Helper Functionality (eg: AvatarURL generator from Join Requests) Ghost Prevention (Tells Discord to clear the RP on disposal) Full Unity3D Editor (Contains all the tools, inspectors and helpers for a Unity3D game all in one package). Documentation All the documentation can be found lachee.github.io/discord-rpc-csharp/docs/ Installation Dependencies: Newtonsoft.Json .NET Standard 2.0 runtime or .NET Framework 4.5: fx 4.5, core 3.1, net 7.0, net 8.0, net 9.0 .NET Project For projects that target either the .NET Standard or .NET Framework, you can get the package on nuget: PM> Install-Package DiscordRichPresence You can also Download or Build your own version of the library if you have more specific requirements. Unity3D Game Engine Unity Package is being moved to Lachee/Discord-RPC-Unity. Please check the releases / documentation there. Usage The Discord.Example project within the solution contains example code, showing how to use all available features. For Unity Specific examples, check out the example project included. There are 3 important stages of usage, Initialization, Invoking and Deinitialization. It's important you follow all 3 stages to ensure proper behaviour of the library. Initialization This stage will setup the connection to Discord and establish the events. Once you have done the initialization you can call SetPresence and other variants as many times as you wish throughout your code. Please note that ideally this should only run once, otherwise conflicts may occur with them trying to access the same Discord client at the same time. public DiscordRpcClient client; //Called when your application first starts. //For example, just before your main loop, on OnEnable for unity. void Initialize() { /* Create a Discord client NOTE: If you are using Unity3D, you must use the full constructor and define the pipe connection. */ client = new DiscordRpcClient(\"my_client_id\"); //Set the logger client.Logger = new ConsoleLogger() { Level = LogLevel.Warning }; //Subscribe to events client.OnReady += (sender, e) => { Console.WriteLine(\"Received Ready from user {0}\", e.User.Username); }; client.OnPresenceUpdate += (sender, e) => { Console.WriteLine(\"Received Update! {0}\", e.Presence); }; //Connect to the RPC client.Initialize(); //Set the rich presence //Call this as many times as you want and anywhere in your code. client.SetPresence(new RichPresence() { Details = \"Example Project\", State = \"csharp example\", Assets = new Assets() { LargeImageKey = \"image_large\", LargeImageText = \"Lachee's Discord IPC Library\", SmallImageKey = \"image_small\" } }); } Invoking Invoking is optional. Use this when thread safety is paramount. The client will store messages from the pipe and won't invoke them until you call Invoke() or DequeueMessages(). It does this because the pipe is working on another thread, and manually invoking ensures proper thread safety and order of operations (especially important in Unity3D applications). In order to enable this method of event calling, you need to set it in the constructor of the DiscordRpcClient under autoEvents. //The main loop of your application, or some sort of timer. Literally the Update function in Unity3D void Update() { //Invoke all the events, such as OnPresenceUpdate client.Invoke(); }; Here is an example on how a Timer could be used to invoke the events for a WinForm var timer = new System.Timers.Timer(150); timer.Elapsed += (sender, args) => { client.Invoke(); }; timer.Start(); Deinitialization It's important that you dispose your client before your application terminates. This will stop the threads, abort the pipe reads, and tell Discord to clear the presence. Failure to do so may result in a memory leak! //Called when your application terminates. //For example, just after your main loop, on OnDisable for unity. void Deinitialize() { client.Dispose(); } Examples To run the current example, either open the solution in Visual Studio and run the DiscordRPC.Example project or use Dotnet: dotnet run --project DiscordRPC.Example Building DiscordRPC Library dotnet build -c Release Unity3D If you wish to have barebones Unity3D implementation, you need to build the DiscordRPC.dll, the Unity Named Pipes Library and the UnityNamedPipe.cs. Put these in your own Unity Project and the .dlls in a folder called Plugins. UWP / .NET MAUI / WIN UI 3 For now, the library doesn't work on UWP applications until we find the issue and fix it. In order to make this library work with the WIN UI 3 related applications such as .NET MAUI, you need to define runFullTrust Capability inside Package.appxmanifest. Here is an example of how to add runFullTrust to your WIN UI 3 application: Package.appxmanifest: <?xml version=\"1.0\" encoding=\"utf-8\"?> <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\" xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\" xmlns:rescap=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities\" IgnorableNamespaces=\"uap rescap\"> ... <Capabilities> <rescap:Capability Name=\"runFullTrust\" /> </Capabilities> </Package> If you use .NET MAUI or WIN UI 3 template for C#, it automatically puts runFullTrust capability. Tests There are currently no tests available to validate the library. This is a active issue and need help with this. The test suite will likely need a way to mock the RPC client. Contribution All contributions are welcome and I am happy for any contribution. However, there are some things that will not be accepted: Spelling only fixes (rude to only contribute to something copilot could do) Complete or large rewrites (unwanted work load to review) Dependency substitutions / removals / additions (these require a issue and discussion first) Support for features only provided by custom Discord clients Obviously AI additions For more information, please read CONTRIBUTING.md"
  }
}